data.frame(model='nlme', predictor = c("level1", "level2", "level3"),
varest = nlme_varest )
data.frame(model='blme', predictor = c("level1", "level2", "level3"),
varest = blme_varest )
)
}
fit_models <- function(simulated_data) {
# fit models and extract coefs
# nlme package
nlme_varest <- as.numeric(VarCorr( lme(obs ~ 1 + pheno_fixed,
random = ~ 1|pheno_fixed/pheno_random,
simulated_data ) )[c(2,4,5), 1])
# blme
blme_varest <- as.data.frame(
VarCorr( blmer(obs ~ 1 | pheno_fixed/pheno_random,
data = simulated_data, cov.prior = wishart,
resid.prior = invgamma) ) )[ c(2,1,3) ,4]
# format output all pretty
rbind(
data.frame(model='nlme', predictor = c("level1", "level2", "level3"),
varest = nlme_varest ),
data.frame(model='blme', predictor = c("level1", "level2", "level3"),
varest = blme_varest )
)
}
sigma_b <- rep(.4, nn_level2)
sigma_e <- .2
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar = diag(sigma_b^2),
nn_level1 = 3,
nn_level2 = 3,
nn_level3 = 3)
simu_data <- rdply(.n = 10, fit_models(gen_data()))
simu_data <- rdply(.n = 10, fit_models(gen_data()))
str(simu_data)
head(simu_data)
make_data_generator <- function(fixed_coef = c(1, 3, 1),
resid_var = 1,
ranef_covar_level1 = diag(sigma_a^2)
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = 3,
nn_level2 = 3,
nn_level3 = 3
)
{
# create design matrix
pheno_fixed <- data.frame(var1 = rep(1:nn_level1,
each = nn_level2*nn_level3))
design_fixed <- model.matrix( ~ 1 + as.factor(var1), data = pheno_fixed)
pheno_random <- data.frame(var2 = rep( rep(1:nn_level2,
each = nn_level3), nn_level1 ) )
design_random <- model.matrix( ~ as.factor(var2), data = pheno_random)
generate_data <- function() {
# sample data set under mixed effects model
simulated_data <- rdply(nn_level1, {
rand_coef_level1 <- t( rmvnorm( n = 1, sigma = ranef_covar_level1 ) )
rand_coef_level2 <- t( rmvnorm( n = 1, sigma = ranef_covar_level2 ) )
epsilon <- rnorm(n = length(nn_level1*nn_level2*nn_level3),
mean = 0, sd = sqrt(resid_var))
obs <- design_fixed %*% rand_coef_level2 +
design_random %*% rand_coef_level2 + epsilon
data.frame(obs = obs,
pheno_fixed = as.factor(pheno_fixed$var1),
pheno_random = as.factor(pheno_random$var2) )
})
names(simulated_data)[1] <- "individual"
simulated_data
}
}
fit_models <- function(simulated_data) {
# fit models and extract coefs
# nlme package
nlme_varest <- as.numeric(VarCorr( lme(obs ~ 1,
random = ~ 1|pheno_fixed/pheno_random,
simulated_data ) )[c(2,4,5), 1])
# blme
blme_varest <- as.data.frame(
VarCorr( blmer(obs ~ 1 | pheno_fixed/pheno_random,
data = simulated_data, cov.prior = wishart,
resid.prior = invgamma) ) )[ c(2,1,3) ,4]
# format output all pretty
rbind(
data.frame(model='nlme', predictor = c("level1", "level2", "level3"),
varest = nlme_varest ),
data.frame(model='blme', predictor = c("level1", "level2", "level3"),
varest = blme_varest )
)
}
sigma_1 <- rep(.2, nn_level1)
sigma_b <- rep(.4, nn_level2)
sigma_e <- .2
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level1 = diag(sigma_b^2),
nn_level1 = 3,
nn_level2 = 3,
nn_level3 = 3)
simu_data <- rdply(.n = 10, fit_models(gen_data()))
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = 3,
nn_level2 = 3,
nn_level3 = 3)
make_data_generator <- function(fixed_coef = c(1, 3, 1),
resid_var = 1,
ranef_covar_level1 = diag(sigma_a^2)
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = 3,
nn_level2 = 3,
nn_level3 = 3
)
{
# create design matrix
pheno_fixed <- data.frame(var1 = rep(1:nn_level1,
each = nn_level2*nn_level3))
design_fixed <- model.matrix( ~ 1 + as.factor(var1), data = pheno_fixed)
pheno_random <- data.frame(var2 = rep( rep(1:nn_level2,
each = nn_level3), nn_level1 ) )
design_random <- model.matrix( ~ as.factor(var2), data = pheno_random)
generate_data <- function() {
# sample data set under mixed effects model
simulated_data <- rdply(nn_level1, {
rand_coef_level1 <- t( rmvnorm( n = 1, sigma = ranef_covar_level1 ) )
rand_coef_level2 <- t( rmvnorm( n = 1, sigma = ranef_covar_level2 ) )
epsilon <- rnorm(n = length(nn_level1*nn_level2*nn_level3),
mean = 0, sd = sqrt(resid_var))
obs <- design_fixed %*% rand_coef_level2 +
design_random %*% rand_coef_level2 + epsilon
data.frame(obs = obs,
pheno_fixed = as.factor(pheno_fixed$var1),
pheno_random = as.factor(pheno_random$var2) )
})
names(simulated_data)[1] <- "individual"
simulated_data
}
}
make_data_generator <- function(fixed_coef = c(1, 3, 1),
resid_var = 1,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = 3,
nn_level2 = 3,
nn_level3 = 3
)
{
# create design matrix
pheno_fixed <- data.frame(var1 = rep(1:nn_level1,
each = nn_level2*nn_level3))
design_fixed <- model.matrix( ~ 1 + as.factor(var1), data = pheno_fixed)
pheno_random <- data.frame(var2 = rep( rep(1:nn_level2,
each = nn_level3), nn_level1 ) )
design_random <- model.matrix( ~ as.factor(var2), data = pheno_random)
generate_data <- function() {
# sample data set under mixed effects model
simulated_data <- rdply(nn_level1, {
rand_coef_level1 <- t( rmvnorm( n = 1, sigma = ranef_covar_level1 ) )
rand_coef_level2 <- t( rmvnorm( n = 1, sigma = ranef_covar_level2 ) )
epsilon <- rnorm(n = length(nn_level1*nn_level2*nn_level3),
mean = 0, sd = sqrt(resid_var))
obs <- design_fixed %*% rand_coef_level2 +
design_random %*% rand_coef_level2 + epsilon
data.frame(obs = obs,
pheno_fixed = as.factor(pheno_fixed$var1),
pheno_random = as.factor(pheno_random$var2) )
})
names(simulated_data)[1] <- "individual"
simulated_data
}
}
fit_models <- function(simulated_data) {
# fit models and extract coefs
# nlme package
nlme_varest <- as.numeric(VarCorr( lme(obs ~ 1,
random = ~ 1|pheno_fixed/pheno_random,
simulated_data ) )[c(2,4,5), 1])
# blme
blme_varest <- as.data.frame(
VarCorr( blmer(obs ~ 1 | pheno_fixed/pheno_random,
data = simulated_data, cov.prior = wishart,
resid.prior = invgamma) ) )[ c(2,1,3) ,4]
# format output all pretty
rbind(
data.frame(model='nlme', predictor = c("level1", "level2", "level3"),
varest = nlme_varest ),
data.frame(model='blme', predictor = c("level1", "level2", "level3"),
varest = blme_varest )
)
}
sigma_1 <- rep(.2, nn_level1)
sigma_b <- rep(.4, nn_level2)
sigma_e <- .2
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = 3,
nn_level2 = 3,
nn_level3 = 3)
simu_data <- rdply(.n = 10, fit_models(gen_data()))
sigma_a <- rep(.2, nn_level1)
sigma_b <- rep(.4, nn_level2)
sigma_e <- .2
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = 3,
nn_level2 = 3,
nn_level3 = 3)
simu_data <- rdply(.n = 10, fit_models(gen_data()))
sigma_a
sigma_a <- rep(.2, nn_level1)
nn_level1 <- 3
nn_level2 <- 3
nn_level3 <- 3
sigma_a <- rep(.2, nn_level1)
sigma_b <- rep(.4, nn_level2)
sigma_e <- .2
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = nn_level1,
nn_level2 = nn_level2,
nn_level3 = nn_level3)
simu_data <- rdply(.n = 10, fit_models(gen_data()))
head(simu_data)
nn_level1 <- 3
nn_level2 <- 3
nn_level3 <- 3
sigma_a <- rep(.2, nn_level1)
sigma_b <- rep(.4, nn_level2)
sigma_e <- 1
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = nn_level1,
nn_level2 = nn_level2,
nn_level3 = nn_level3)
simu_data <- rdply(.n = 100, fit_models(gen_data()))
str(simu_data)
head(simu_data)
daply(simu_data, .(model, predictor), function(df) {
mean = mean(df$varest)
var = var(df$varest)
})
interact(c(1:3), c(1:2))
daply(simu_data, .(model, predictor), function(df) {
mean = mean(df$varest)
#                            var = var(df$varest)
})
mean <- daply(simu_data, .(model, predictor), function(df) {
mean(df$varest)
})
standard_error <- daply(simu_data, .(model, predictor), function(df) {
sqrt(var(df$varest)/100)
})
standard_error
mean
.4^2
sigma_a <- rep(.4, nn_level1)
sigma_b <- rep(.2, nn_level2)
sigma_e <- 1
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = nn_level1,
nn_level2 = nn_level2,
nn_level3 = nn_level3)
simu_data <- rdply(.n = 100, fit_models(gen_data()))
head(simu_data)
mean <- daply(simu_data, .(model, predictor), function(df) {
mean(df$varest)
})
standard_error <- daply(simu_data, .(model, predictor), function(df) {
sqrt(var(df$varest)/100)
})
mean
standard_error
t <- MCMCglmm(rnorm(27)~1, random | ~ pf + pf:pr)
t
tt <- MCMCglmm(rnorm(27)~1, random | ~ pf + pf:pr)
tt <- MCMCglmm(obs, random | ~ pf + pf:pr, data = data.frame(obs = rnorm(27), pf = pf, pr = pr))
tt <- MCMCglmm(obs ~ 1, random | ~ pf + pf:pr, data = data.frame(obs = rnorm(27), pf = pf, pr = pr))
tt <- MCMCglmm(obs ~ 1, random = ~ pf + pf:pr, data = data.frame(obs = rnorm(27), pf = pf, pr = pr))
tt <- MCMCglmm(obs ~ 1, random = ~ pf + pf:pr, data = data.frame(obs = rnorm(27), pf = pf, pr = pr), verbose = FALSE)
str(tt)
tt$VCV
colMeans(tt$VCV)
colVars(tt$VCV)
require(matrixStats)
colVars(tt$VCV)
fit_models <- function(simulated_data) {
# fit models and extract coefs
# nlme package
nlme_varest <- as.numeric(VarCorr( lme(obs ~ 1,
random = ~ 1|pheno_fixed/pheno_random,
simulated_data ) )[c(2,4,5), 1])
# blme
blme_varest <- as.data.frame(
VarCorr( blmer(obs ~ 1 | pheno_fixed/pheno_random,
data = simulated_data, cov.prior = wishart,
resid.prior = invgamma) ) )[ c(2,1,3) ,4]
# MCMCglmm
MCMCglmm_fit <- MCMCglmm(obs~1,
random | ~ pheno_fixed + pheno_fixed:pheno_random,
data = simulated_data, verbose = FALSE)$VCV)
MCMCglmm_varest <- colMeans(MCMCglmm_fit$VCV)
MCMCglmm_varest_var <- colVars(MCMCglmm_fit$VCV)
# format output all pretty
rbind(
data.frame(model='nlme', predictor = c("level1", "level2", "level3"),
varest = nlme_varest, varest_var = rep(NA, 3) ),
data.frame(model='blme', predictor = c("level1", "level2", "level3"),
varest = blme_varest, varest_var = rep(NA, 3) )
data.frame(model='MCMCglmm', predictor = c("level1", "level2", "level3"),
varest = mcmc_varest, varest_var = MCMCglmm_varest_var)
)
}
fit_models <- function(simulated_data) {
# fit models and extract coefs
# nlme package
nlme_varest <- as.numeric(VarCorr( lme(obs ~ 1,
random = ~ 1|pheno_fixed/pheno_random,
simulated_data ) )[c(2,4,5), 1])
# blme
blme_varest <- as.data.frame(
VarCorr( blmer(obs ~ 1 | pheno_fixed/pheno_random,
data = simulated_data, cov.prior = wishart,
resid.prior = invgamma) ) )[ c(2,1,3) ,4]
# MCMCglmm
MCMCglmm_fit <- MCMCglmm(obs~1,
random = ~ pheno_fixed + pheno_fixed:pheno_random,
data = simulated_data, verbose = FALSE)$VCV
MCMCglmm_varest <- colMeans(MCMCglmm_fit$VCV)
MCMCglmm_varest_var <- colVars(MCMCglmm_fit$VCV)
# format output all pretty
rbind(
data.frame(model='nlme', predictor = c("level1", "level2", "level3"),
varest = nlme_varest, varest_var = rep(NA, 3) ),
data.frame(model='blme', predictor = c("level1", "level2", "level3"),
varest = blme_varest, varest_var = rep(NA, 3) )
data.frame(model='MCMCglmm', predictor = c("level1", "level2", "level3"),
varest = mcmc_varest, varest_var = MCMCglmm_varest_var)
)
}
fit_models <- function(simulated_data) {
# fit models and extract coefs
# nlme package
nlme_varest <- as.numeric(VarCorr( lme(obs ~ 1,
random = ~ 1|pheno_fixed/pheno_random,
simulated_data ) )[c(2,4,5), 1])
# blme
blme_varest <- as.data.frame(
VarCorr( blmer(obs ~ 1 | pheno_fixed/pheno_random,
data = simulated_data, cov.prior = wishart,
resid.prior = invgamma) ) )[ c(2,1,3) ,4]
# MCMCglmm
MCMCglmm_fit <- MCMCglmm(obs~1,
random = ~ pheno_fixed + pheno_fixed:pheno_random,
data = simulated_data, verbose = FALSE)$VCV
MCMCglmm_varest <- colMeans(MCMCglmm_fit$VCV)
MCMCglmm_varest_var <- colVars(MCMCglmm_fit$VCV)
# format output all pretty
rbind(
data.frame(model='nlme', predictor = c("level1", "level2", "level3"),
varest = nlme_varest, varest_var = rep(NA, 3) ),
data.frame(model='blme', predictor = c("level1", "level2", "level3"),
varest = blme_varest, varest_var = rep(NA, 3) ),
data.frame(model='MCMCglmm', predictor = c("level1", "level2", "level3"),
varest = mcmc_varest, varest_var = MCMCglmm_varest_var)
)
}
nn_level1 <- 3
nn_level2 <- 3
nn_level3 <- 3
sigma_a <- rep(.4, nn_level1)
sigma_b <- rep(.2, nn_level2)
sigma_e <- 1
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = nn_level1,
nn_level2 = nn_level2,
nn_level3 = nn_level3)
simu_data <- rdply(.n = 100, fit_models(gen_data()))
fit_models <- function(simulated_data) {
# fit models and extract coefs
# nlme package
nlme_varest <- as.numeric(VarCorr( lme(obs ~ 1,
random = ~ 1|pheno_fixed/pheno_random,
simulated_data ) )[c(2,4,5), 1])
# blme
blme_varest <- as.data.frame(
VarCorr( blmer(obs ~ 1 | pheno_fixed/pheno_random,
data = simulated_data, cov.prior = wishart,
resid.prior = invgamma) ) )[ c(2,1,3) ,4]
# MCMCglmm
MCMCglmm_fit <- MCMCglmm(obs~1,
random = ~ pheno_fixed + pheno_fixed:pheno_random,
data = simulated_data, verbose = FALSE)
MCMCglmm_varest <- colMeans(MCMCglmm_fit$VCV)
MCMCglmm_varest_var <- colVars(MCMCglmm_fit$VCV)
# format output all pretty
rbind(
data.frame(model='nlme', predictor = c("level1", "level2", "level3"),
varest = nlme_varest, varest_var = rep(NA, 3) ),
data.frame(model='blme', predictor = c("level1", "level2", "level3"),
varest = blme_varest, varest_var = rep(NA, 3) ),
data.frame(model='MCMCglmm', predictor = c("level1", "level2", "level3"),
varest = mcmc_varest, varest_var = MCMCglmm_varest_var)
)
}
nn_level1 <- 3
nn_level2 <- 3
nn_level3 <- 3
sigma_a <- rep(.4, nn_level1)
sigma_b <- rep(.2, nn_level2)
sigma_e <- 1
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = nn_level1,
nn_level2 = nn_level2,
nn_level3 = nn_level3)
simu_data <- rdply(.n = 100, fit_models(gen_data()))
fit_models <- function(simulated_data) {
# fit models and extract coefs
# nlme package
nlme_varest <- as.numeric(VarCorr( lme(obs ~ 1,
random = ~ 1|pheno_fixed/pheno_random,
simulated_data ) )[c(2,4,5), 1])
# blme
blme_varest <- as.data.frame(
VarCorr( blmer(obs ~ 1 | pheno_fixed/pheno_random,
data = simulated_data, cov.prior = wishart,
resid.prior = invgamma) ) )[ c(2,1,3) ,4]
# MCMCglmm
MCMCglmm_fit <- MCMCglmm(obs~1,
random = ~ pheno_fixed + pheno_fixed:pheno_random,
data = simulated_data, verbose = FALSE)
mcmc_varest <- colMeans(MCMCglmm_fit$VCV)
mcmc_varest_var <- colVars(MCMCglmm_fit$VCV)
# format output all pretty
rbind(
data.frame(model='nlme', predictor = c("level1", "level2", "level3"),
varest = nlme_varest, varest_var = rep(NA, 3) ),
data.frame(model='blme', predictor = c("level1", "level2", "level3"),
varest = blme_varest, varest_var = rep(NA, 3) ),
data.frame(model='MCMCglmm', predictor = c("level1", "level2", "level3"),
varest = mcmc_varest, varest_var = mcmc_varest_var)
)
}
nn_level1 <- 3
nn_level2 <- 3
nn_level3 <- 3
sigma_a <- rep(.4, nn_level1)
sigma_b <- rep(.2, nn_level2)
sigma_e <- 1
mu <- c(1, 3, 1)
gen_data <- make_data_generator(fixed_coef = mu,
resid_var = sigma_e^2,
ranef_covar_level1 = diag(sigma_a^2),
ranef_covar_level2 = diag(sigma_b^2),
nn_level1 = nn_level1,
nn_level2 = nn_level2,
nn_level3 = nn_level3)
simu_data <- rdply(.n = 100, fit_models(gen_data()))
head(simu_data)
mean <- daply(simu_data, .(model, predictor), function(df) {
mean(df$varest)
})
standard_error <- daply(simu_data, .(model, predictor), function(df) {
sqrt(var(df$varest)/100)
})
standard_error
mean
.4^2
.262
.2^2
library(MCMCglmm)
library(matrixStats)
require(Humanzee)
?PropTest
mean
standard_error
head(simu_data)
head(simu_data, 10)
simu_data <- rdply(.n = 100, fit_models(gen_data()))
?MCMCglmm
str(means)
str(mean)
mean
head(simu_data)
install.packages("shiny")
