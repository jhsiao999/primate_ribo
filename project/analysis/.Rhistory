exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
null_interact <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_per_null) = featureData(eset_sub)
return(interact2way(eset_per_null) )
})
null_interact
}
res_null_rna_ribo <- permute_interact(eset_full = eSetRRP.RP.Q.log2,
datatypes = c("rna", "ribo"),
permute_labels = permute_labels[1])
str(res_null_rna_ribo)
head(res_null_rna_ribo[[1]][1:10,])
str(res.riborna)
head(res.riborna[1:10,1:3])
head(res_null_rna_ribo[[1]][1:10,])
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_per_null) = featureData(eset_sub)
eset_per_null
pData(eset_per_null)
pData(eset_sub)
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
colnames(emat_per_null)
n_permute <- length(permute_labels)
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null),
phenoData = phenoData(eset_sub),
experimentData = experimentData(eset_sub))
featureData(eset_per_null) = featureData(eset_sub)
a <- interact2way(eset_per_null)
str(a)
n_permute
order_datatypes
exclude_datatypes
pData(eset_sub)
experimentData(eset_sub)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null))
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null))
phenoData(eset_per_null) <- phenoData(eset_sub)
featureData(eset_per_null) <- featureData(eset_sub)
permute_interact <- function(eset_full, datatypes, permute_labels) {
n_permute <- length(permute_labels)
order_datatypes <- match(datatypes, c("rna", "ribo", "protein"))
exclude_datatypes <- c("rna", "ribo", "protein")[setdiff(c(1:3), order_datatypes)]
eset_sub <-   eset_full[ ,eset_full$seqData != exclude_datatypes
& eset_full$species != "rhesus"]
null_interact <- lapply(1:n_permute, function(each_null) {
emat1 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[1]],
eset_sub$seqData == datatypes[1] ]
emat2 <- exprs(eset_sub)[ permute_labels[[each_null]][,order_datatypes[2]],
eset_sub$seqData == datatypes[2] ]
emat_per_null <- cbind(emat1, emat2)
eset_per_null <- ExpressionSet(assayData = as.matrix(emat_per_null))
phenoData(eset_per_null) <- phenoData(eset_sub)
featureData(eset_per_null) <- featureData(eset_sub)
return(interact2way(eset_per_null) )
})
null_interact
}
interact2way
install_github("jhsiao999/Humanzee")
require(Humanzee)
interact2way
ls()
str(rnapro_null_pro_buff)
install.packages("doParallel")
require(doParallel)
?registerDoParallel
install_github("jhsiao999/Humanzee")
library(Biobase)
## Set working directories
dir <- "../"
figdir <- file.path(dir,"figures")
rdadir <- file.path(dir,"rdas")
datadir <- file.path(dir, "data")
## Use broman package for colors
require(broman)
crayon <- brocolors("crayons")
## Load customized packages
require(devtools)
require(Humanzee)
# Load data to compute fold changes
load(file.path(rdadir, "eSetRRP.rda"))
eSet.temp <- eSetRRP.log2[, eSetRRP.log2$species!="rhesus"]
fc.mat <- lapply( seq_along( c("human","chimp") ), function(i) {
ii <- eSet.temp$species == c("human","chimp")[i]
eSet.tt <- eSet.temp[, ii]
emat <- lapply( seq_along( c("ribo","rna","protein") ), function(j) {
jj <- eSet.tt$seqData == c("ribo","rna","protein")[j]
rowMeans( exprs(eSet.tt[, jj] ), na.rm=TRUE )
})
emat <- do.call(cbind, emat)
colnames(emat) <- c("ribo","rna","protein")
return( data.frame(emat) )
})
names(fc.mat) <- c("human","chimp")
dmat_unnormed <- data.frame( ribo = fc.mat$human$ribo-fc.mat$chimp$ribo,
rna = fc.mat$human$rna-fc.mat$chimp$rna,
pro = fc.mat$human$protein-fc.mat$chimp$protein )
# Load permutation labels
load( file=file.path(rdadir, "permute_labels.rda") )
# Compute direction indices for each permuted data set
direction_list_permute <-
lapply(1:length(permute_labels),
function(per_permute) {
rna_labels <- permute_labels[[per_permute]]$rna
ribo_labels <- permute_labels[[per_permute]]$ribo
pro_labels <- permute_labels[[per_permute]]$pro
ii_rnaGTribo_per_permute <- abs(dmat_unnormed$rna)[rna_labels] >
abs(dmat_unnormed$ribo)[ribo_labels]
ii_riboGTrna_per_permute <- abs(dmat_unnormed$ribo)[ribo_labels] >
abs(dmat_unnormed$rna)[rna_labels]
ii_rnaGTpro_per_permute <- abs(dmat_unnormed$rna)[rna_labels] >
abs(dmat_unnormed$pro)[pro_labels]
ii_proGTrna_per_permute <- abs(dmat_unnormed$pro)[pro_labels] >
abs(dmat_unnormed$rna)[rna_labels]
list(ii_rnaGTribo_per_permute = ii_rnaGTribo_per_permute,
ii_riboGTrna_per_permute = ii_riboGTrna_per_permute,
ii_rnaGTpro_per_permute = ii_rnaGTpro_per_permute,
ii_proGTrna_per_permute = ii_proGTrna_per_permute)
})
# Load interaction model results on the permuted data sets
load( file = file.path(rdadir, "res_null_ribo_rna.rda"))
load( file = file.path(rdadir, "res_null_rna_pro.rda"))
# Compute significance index
sig_list_permute <-
lapply(1:length(permute_labels),
function(per_permute) {
ii_sig_rnaribo_per_permute <-
res_null_ribo_rna[[per_permute]]$int.qval < .01
ii_sig_rnapro_per_permute <-
res_null_rna_pro[[per_permute]]$int.qval < .01
list(ii_sig_rnaribo_per_permute = ii_sig_rnaribo_per_permute,
ii_sig_rnapro_per_permute = ii_sig_rnapro_per_permute)
})
load(file = file.path(rdadir, "res_null_ribo_pro.rda") )
par(mfrow = c(2,2))
ribo_rna_permute_pval <- res_null_ribo_rna[[999]]$int.pval
hist( ribo_rna_permute_pval, xlab = "p-value",
main = "P-value distribution of Ribo-RNA interaction test
based on a single permutated data set")
rna_pro_permute_pval <- res_null_rna_pro[[999]]$int.pval
hist( rna_pro_permute_pval, xlab = "p-value",
main = "P-value distribution of RNA-PRO interaction test
based on a single permutated data set")
ribo_pro_permute_pval <- res_null_ribo_pro[[999]]$int.pval
hist( ribo_pro_permute_pval, xlab = "p-value",
main = "P-value distribution of Ribo-PRO interaction test
based on a single permutated data set")
buffer_tables <-
lapply(1:length(permute_labels),
function(per_permute) {
buffer_matrix_per_permute <- matrix(0, 2, 2)
direction_per_permute <- direction_list_permute[[per_permute]]
sig_per_permute <- sig_list_permute[[per_permute]]
# Buffering at ribo and protein
buffer_matrix_per_permute[1,1] <-
sum(direction_per_permute$ii_rnaGTpro_per_permute &
sig_per_permute$ii_sig_rnapro_per_permute &
direction_per_permute$ii_rnaGTribo_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
# Non-buffered at Ribo and buffered at Protein
buffer_matrix_per_permute[2,1] <-
sum(direction_per_permute$ii_rnaGTpro_per_permute &
sig_per_permute$ii_sig_rnapro_per_permute &
direction_per_permute$ii_riboGTrna_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
# Buffered at Ribo and non-buffered at Protein
buffer_matrix_per_permute[1,2] <-
sum(direction_per_permute$ii_proGTrna_per_permute &
sig_per_permute$ii_sig_rnapro_per_permute &
direction_per_permute$ii_rnaGTribo_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
# Non-buffered at Ribo and non-buffered at Protein
buffer_matrix_per_permute[2,2] <-
sum(direction_per_permute$ii_proGTrna_per_permute &
sig_per_permute$ii_sig_rnapro_per_permute &
direction_per_permute$ii_riboGTrna_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
return(buffer_matrix_per_permute)
})
load(file.path(rdadir,"TEnew.rda"))
## load LRT results of RNA vs. Protein divergence
load(file.path(rdadir,"rnapro.rda"))
## Compute fold changes based on un-normalized data
## from the object eSetRRP.log2 in eSetRRP.rda
load( file.path(rdadir,"eSetRRP.rda") )
eSet.temp <- eSetRRP.log2[ ,eSetRRP.log2$species!="rhesus"]
fc.mat <- lapply( seq_along( c("human","chimp") ), function(i) {
ii <- eSet.temp$species == c("human","chimp")[i]
eSet.tt <- eSet.temp[, ii]
emat <- lapply( seq_along( c("ribo","rna","protein") ), function(j) {
jj <- eSet.tt$seqData == c("ribo","rna","protein")[j]
rowMeans( exprs(eSet.tt[, jj] ), na.rm=TRUE )
})
emat <- do.call(cbind, emat)
colnames(emat) <- c("ribo","rna","protein")
return( data.frame(emat) )
})
names(fc.mat) <- c("human","chimp")
dmat_unnormed <- data.frame( ribo = fc.mat$human$ribo-fc.mat$chimp$ribo,
rna = fc.mat$human$rna-fc.mat$chimp$rna,
pro = fc.mat$human$protein-fc.mat$chimp$protein )
xy.rnapro <- data.frame( rna = dmat_unnormed$rna,
pro = dmat_unnormed$pro )
xy.riborna <- data.frame( rna = dmat_unnormed$rna,
ribo = dmat_unnormed$ribo )
xy.ribopro <- data.frame( ribo = dmat_unnormed$ribo,
pro = dmat_unnormed$pro )
# RNA-Ribo divergence
# Genes with sig. human/chimp difference in divergence between RNA and Ribo
ii_sig_rnaribo <- res.riborna$int.qval < .01
# Genes with RNA > Ribo in effect sizes
ii_rnaGTribo <- abs(xy.riborna$rna) > abs(xy.riborna$ribo)
# Genes with RNA < Ribo in effect sizes
ii_riboGTrna <- abs(xy.riborna$ribo) > abs(xy.riborna$rna)
# RNA-protein divergence
# Genes with sig. human/chimp difference in divergence between RNA and protein
ii_sig_rnapro <- res.rnapro$int.qval < .01
# Genes with RNA > Protein in effect sizes
ii_rnaGTpro <- abs(xy.rnapro$rna) > abs(xy.rnapro$pro)
# Genes with RNA < Protein in effect sizes
ii_proGTrna <- abs(xy.rnapro$pro) > abs(xy.rnapro$rna)
# Observed table
buffering_matrix_interact <-
matrix(0, 2, 2,
dimnames = list(rnaribo = c("Ribo buffered", "Ribo non-buffered"),
rnapro = c("Protein buffered", "Protein non-buffered") ) )
buffering_matrix_interact[1,1] <-
sum( (ii_rnaGTpro & ii_sig_rnapro)[ii_rnaGTribo & ii_sig_rnaribo])
buffering_matrix_interact[1,2] <-
sum( (ii_proGTrna & ii_sig_rnapro)[ii_rnaGTribo & ii_sig_rnaribo])
buffering_matrix_interact[2,1] <-
sum( (ii_rnaGTpro & ii_sig_rnapro)[ii_riboGTrna & ii_sig_rnaribo])
buffering_matrix_interact[2,2] <-
sum( (ii_proGTrna & ii_sig_rnapro)[ii_riboGTrna & ii_sig_rnaribo])
load(file.path(rdadir,"TEnew.rda"))
## load LRT results of RNA vs. Protein divergence
load(file.path(rdadir,"rnapro.rda"))
## Compute fold changes based on un-normalized data
## from the object eSetRRP.log2 in eSetRRP.rda
load( file.path(rdadir,"eSetRRP.rda") )
eSet.temp <- eSetRRP.log2[ ,eSetRRP.log2$species!="rhesus"]
fc.mat <- lapply( seq_along( c("human","chimp") ), function(i) {
ii <- eSet.temp$species == c("human","chimp")[i]
eSet.tt <- eSet.temp[, ii]
emat <- lapply( seq_along( c("ribo","rna","protein") ), function(j) {
jj <- eSet.tt$seqData == c("ribo","rna","protein")[j]
rowMeans( exprs(eSet.tt[, jj] ), na.rm=TRUE )
})
emat <- do.call(cbind, emat)
colnames(emat) <- c("ribo","rna","protein")
return( data.frame(emat) )
})
names(fc.mat) <- c("human","chimp")
dmat_unnormed <- data.frame( ribo = fc.mat$human$ribo-fc.mat$chimp$ribo,
rna = fc.mat$human$rna-fc.mat$chimp$rna,
pro = fc.mat$human$protein-fc.mat$chimp$protein )
xy.rnapro <- data.frame( rna = dmat_unnormed$rna,
pro = dmat_unnormed$pro )
xy.riborna <- data.frame( rna = dmat_unnormed$rna,
ribo = dmat_unnormed$ribo )
xy.ribopro <- data.frame( ribo = dmat_unnormed$ribo,
pro = dmat_unnormed$pro )
# RNA-Ribo divergence
# Genes with sig. human/chimp difference in divergence between RNA and Ribo
ii_sig_rnaribo <- res.riborna$int.qval < .01
# Genes with RNA > Ribo in effect sizes
ii_rnaGTribo <- abs(xy.riborna$rna) > abs(xy.riborna$ribo)
# Genes with RNA < Ribo in effect sizes
ii_riboGTrna <- abs(xy.riborna$ribo) > abs(xy.riborna$rna)
# RNA-protein divergence
# Genes with sig. human/chimp difference in divergence between RNA and protein
ii_sig_rnapro <- res.rnapro$int.qval < .01
# Genes with RNA > Protein in effect sizes
ii_rnaGTpro <- abs(xy.rnapro$rna) > abs(xy.rnapro$pro)
# Genes with RNA < Protein in effect sizes
ii_proGTrna <- abs(xy.rnapro$pro) > abs(xy.rnapro$rna)
buffering_matrix <-
matrix(0, 2, 2,
dimnames = list(rnaribo = c("Ribo buffered", "Ribo non-buffered"),
rnapro = c("Protein buffered", "Protein non-buffered") ) )
buffering_matrix[1,1] <-
sum( (ii_rnaGTpro & ii_rnaGTribo) & ii_sig_rnaribo)
buffering_matrix[1,2] <-
sum( (ii_proGTrna & ii_rnaGTribo) & ii_sig_rnaribo)
buffering_matrix[2,1] <-
sum( (ii_rnaGTpro & ii_riboGTrna) & ii_sig_rnaribo)
buffering_matrix[2,2] <-
sum( (ii_proGTrna & ii_riboGTrna) & ii_sig_rnaribo)
buffering_matrix
sum(buffer_matrix)
sum(buffering_matrix)
buffering_matrix <-
matrix(0, 2, 2,
dimnames = list(rnaribo = c("Ribo buffered", "Ribo non-buffered"),
rnapro = c("Protein buffered", "Protein non-buffered") ) )
buffering_matrix[1,1] <-
sum( (ii_rnaGTpro & ii_rnaGTribo) & ii_sig_rnaribo)
buffering_matrix[1,2] <-
sum( (ii_proGTrna & ii_rnaGTribo) & ii_sig_rnaribo)
buffering_matrix[2,1] <-
sum( (ii_rnaGTpro & ii_riboGTrna) & ii_sig_rnaribo)
buffering_matrix[2,2] <-
sum( (ii_proGTrna & ii_riboGTrna) & ii_sig_rnaribo)
buffering_matrix
buffer_tables_riborna <-
lapply(1:length(permute_labels),
function(per_permute) {
buffering_matrix_riborna <- matrix(0, 2, 2)
direction_per_permute <- direction_list_permute[[per_permute]]
sig_per_permute <- sig_list_permute[[per_permute]]
# Buffering at ribo and protein
buffering_matrix_riborna[1,1] <-
sum(direction_per_permute$ii_rnaGTpro_per_permute &
direction_per_permute$ii_rnaGTribo_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
# Non-buffered at Ribo and buffered at Protein
buffering_matrix_riborna[2,1] <-
sum(direction_per_permute$ii_rnaGTpro_per_permute &
direction_per_permute$ii_riboGTrna_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
# Buffered at Ribo and non-buffered at Protein
buffering_matrix_riborna[1,2] <-
sum(direction_per_permute$ii_proGTrna_per_permute &
direction_per_permute$ii_rnaGTribo_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
# Non-buffered at Ribo and non-buffered at Protein
buffer_matrix_per_permute[2,2] <-
sum(direction_per_permute$ii_proGTrna_per_permute &
direction_per_permute$ii_riboGTrna_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
return(buffer_matrix_per_permute)
})
# Permutation-based table
buffer_tables_riborna <-
lapply(1:length(permute_labels),
function(per_permute) {
buffering_matrix_riborna <- matrix(0, 2, 2)
direction_per_permute <- direction_list_permute[[per_permute]]
sig_per_permute <- sig_list_permute[[per_permute]]
# Buffering at ribo and protein
buffering_matrix_riborna[1,1] <-
sum(direction_per_permute$ii_rnaGTpro_per_permute &
direction_per_permute$ii_rnaGTribo_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
# Non-buffered at Ribo and buffered at Protein
buffering_matrix_riborna[2,1] <-
sum(direction_per_permute$ii_rnaGTpro_per_permute &
direction_per_permute$ii_riboGTrna_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
# Buffered at Ribo and non-buffered at Protein
buffering_matrix_riborna[1,2] <-
sum(direction_per_permute$ii_proGTrna_per_permute &
direction_per_permute$ii_rnaGTribo_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
# Non-buffered at Ribo and non-buffered at Protein
buffering_matrix_riborna[2,2] <-
sum(direction_per_permute$ii_proGTrna_per_permute &
direction_per_permute$ii_riboGTrna_per_permute &
sig_per_permute$ii_sig_rnaribo_per_permute)
return(buffering_matrix_riborna)
})
buffering_matrix
observed_ribo <- buffering_matrix[1,1]/rowSums(buffering_matrix)[1]
observed_ribo
null_ribo <- sapply(buffer_tables_riborna,
function(per_table) {
per_table[1,1]/rowSums(per_table)[1]
})
observed_riborna <- buffering_matrix[1,1]/rowSums(buffering_matrix)[1]
null_ribo <- sapply(buffer_tables_riborna,
function(per_table) {
per_table[1,1]/rowSums(per_table)[1]
})
hist(null_riborna,
main = paste("Permuted distribution
observed", round(observed_riborna,2)*100, "percent"),
xlab = "Proportion")
null_riborna <- sapply(buffer_tables_riborna,
function(per_table) {
per_table[1,1]/rowSums(per_table)[1]
})
hist(null_riborna,
main = paste("Permuted distribution
observed", round(observed_riborna,2)*100, "percent"),
xlab = "Proportion")
abline( v = observed_riborna, col = "red")
ntests <- pmin(sum(!is.na(null_riborna)), length(null_riborna))
permute_pval <- pmax(sum(null_riborna > observed_riborna, na.rm = TRUE)/ntests,
1/ntests)
permute_pval
par(mfrow=c(1,1))
hist(null_riborna,
main = paste("Permuted distribution
observed", round(observed_riborna,2)*100, "percent"),
xlab = "Proportion")
abline( v = observed_riborna, col = "red")
null_riborna <- sapply(buffer_tables_riborna,
function(per_table) {
per_table[1,1]/rowSums(per_table)[1]
})
hist(null_riborna,
main = paste("Permuted distribution
observed", round(observed_riborna,2)*100, "percent"),
xlab = "Proportion")
abline( v = observed_riborna, col = "red")
ntests <- pmin(sum(!is.na(null_riborna)), length(null_riborna))
permute_pval <- pmax(sum(null_riborna > observed_riborna, na.rm = TRUE)/ntests,
1/ntests)
permute_pval
buffer_tables_riborna[[1]]
buffering_matrix_rnapro <-
matrix(0, 2, 2,
dimnames = list(rnaribo = c("Ribo buffered", "Ribo non-buffered"),
rnapro = c("Protein buffered", "Protein non-buffered") ) )
buffering_matrix_rnapro[1,1] <-
sum( (ii_rnaGTpro & ii_rnaGTribo) & ii_sig_rnapro)
buffering_matrix_rnapro[1,2] <-
sum( (ii_proGTrna & ii_rnaGTribo) & ii_sig_rnapro)
buffering_matrix_rnapro[2,1] <-
sum( (ii_rnaGTpro & ii_riboGTrna) & ii_sig_rnapro)
buffering_matrix_rnapro[2,2] <-
sum( (ii_proGTrna & ii_riboGTrna) & ii_sig_rnapro)
# Permutation-based table
buffer_tables_rnapro_permute <-
lapply(1:length(permute_labels),
function(per_permute) {
buffering_matrix_rnapro <- matrix(0, 2, 2)
direction_per_permute <- direction_list_permute[[per_permute]]
sig_per_permute <- sig_list_permute[[per_permute]]
# Buffering at ribo and protein
buffering_matrix_rnapro[1,1] <-
sum(direction_per_permute$ii_rnaGTpro_per_permute &
direction_per_permute$ii_rnaGTribo_per_permute &
sig_per_permute$ii_sig_rnapro_per_permute)
# Non-buffered at Ribo and buffered at Protein
buffering_matrix_rnapro[2,1] <-
sum(direction_per_permute$ii_rnaGTpro_per_permute &
direction_per_permute$ii_riboGTrna_per_permute &
sig_per_permute$ii_sig_rnapro_per_permute)
# Buffered at Ribo and non-buffered at Protein
buffering_matrix_rnapro[1,2] <-
sum(direction_per_permute$ii_proGTrna_per_permute &
direction_per_permute$ii_rnaGTribo_per_permute &
sig_per_permute$ii_sig_rnapro_per_permute)
# Non-buffered at Ribo and non-buffered at Protein
buffering_matrix_rnapro[2,2] <-
sum(direction_per_permute$ii_proGTrna_per_permute &
direction_per_permute$ii_riboGTrna_per_permute &
sig_per_permute$ii_sig_rnapro_per_permute)
return(buffering_matrix_rnapro)
})
buffering_matrix_rnapro
colSums(buffering_matrix_rnapro)[1]
observed_rnapro <- buffering_matrix_rnapro[1,1]/colSums(buffering_matrix_rnapro)[1]
observed_rnapro
observed_rnapro <- buffering_matrix_rnapro[1,1]/colSums(buffering_matrix_rnapro)[1]
null_rnapro <- sapply(buffer_tables_rnapro_permute,
function(per_table) {
per_table[1,1]/colSums(per_table)[1]
})
round(observed_rnapro,2)*100
hist(null_rnapro,
main = paste("Permuted distribution
observed", round(observed_rnapro,2)*100, "percent"),
xlab = "Proportion")
abline( v = observed_rnapro, col = "red")
ntests <- pmin(sum(!is.na(null_rnapro)), length(null_rnapro))
permute_pval <- pmax(sum(null_rnapro > observed_rnapro, na.rm = TRUE)/ntests,
1/ntests)
permute_pval
ntests
sum(null_rnapro > observed_rnapro, na.rm = TRUE)
ntests <- pmin(sum(!is.na(null_rnapro)), length(null_rnapro))
permute_pval <- pmax(sum(null_rnapro > observed_rnapro, na.rm = TRUE)/ntests,
1/ntests)
permute_pval
