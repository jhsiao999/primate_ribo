roc.curve<-function(pvalue1,pvalue2,cutoff,breaks,color){
TPR<-c()
FPR<-c()
truePositive <- pvalue1 < cutoff
trueNegative <- pvalue1 > cutoff
threshold<-seq(0,1,1/breaks)
for (i in 1:breaks+1){
Detected <- pvalue2 < threshold[i]
TPR[i] <- length(which(truePositive & Detected))/length(which(truePositive))
FPR[i] <- length(which(trueNegative & Detected))/length(which(trueNegative))
}
plot(FPR,TPR,xlim=c(0,1),ylim=c(0,1),col=color,pch=16,cex=0.3)
}
roc.curve(mm4HvC.pval,oriHvC.pval,0.01,1000,"black")
?plot
HC.pval<-cbind(mm4HvC.pval,oriHvC.pval,combat.nonparHvC.pval)
HC.pval<-cbind(mm4HvC.pval,oriHvC.pval,combat.nonparHvC.pval)
colnames(HC.pval)<-c("mm4HC","oriHC","corHC")
vennDiagram(HC.pval<0.01)
str(order(mm4HvC.pval)
)
head(order(mm4HvC.pval))
head(mm4HvC.pval[order(mm4HvC.pval)])
tail(mm4HvC.pval[order(mm4HvC.pval)])
str(order(mm4HvC.pval)[1:500])
mm4HvC.pval[order(mm4HvC.pval)[500]]
order(mm4HvC.pval)[500]
mm4HvC.top500<-mm4HvC.pval<mm4HvC.pval[order(mm4HvC.pval)[500]]
str(mm4HvC.top500)
length(mm4HvC.top500)
length(mm4HvC.top500 == TRUE)
length(which(mm4HvC.top500))
mm4HvC.top500<-mm4HvC.pval<mm4HvC.pval[order(mm4HvC.pval)[501]]
oriHvC.top500<-oriHvC.pval<oriHvC.pval[order(oriHvC.pval)[501]]
combat.nonparHvC.top500<-combat.nonparHvC.pval<combat.nonparHvC.pval[order(combat.nonparHvC.pval)[501]]
HC.pval.top500<-cbind(mm4HvC.top500,oriHvC.top500,combat.nonparHvC.top500)
colnames(HC.pval.top500)<-c("mm4HC","oriHC","corHC")
vennDiagram(HC.pval.top500)
mm4RvC.top500<-mm4RvC.pval<mm4RvC.pval[order(mm4RvC.pval)[501]]
oriRvC.top500<-oriRvC.pval<oriRvC.pval[order(oriRvC.pval)[501]]
combat.nonparRvC.top500<-combat.nonparRvC.pval<combat.nonparRvC.pval[order(combat.nonparRvC.pval)[501]]
RC.pval.top500<-cbind(mm4RvC.top500,oriRvC.top500,combat.nonparRvC.top500)
colnames(RC.pval.top500)<-c("mm4RC","oriRC","corRC")
vennDiagram(RC.pval.top500)
mm4HvC.top1000<-mm4HvC.pval<mm4HvC.pval[order(mm4HvC.pval)[1001]]
oriHvC.top1000<-oriHvC.pval<oriHvC.pval[order(oriHvC.pval)[1001]]
combat.nonparHvC.top1000<-combat.nonparHvC.pval<combat.nonparHvC.pval[order(combat.nonparHvC.pval)[1001]]
HC.pval.top1000<-cbind(mm4HvC.top1000,oriHvC.top1000,combat.nonparHvC.top1000)
colnames(HC.pval.top1000)<-c("mm4HC","oriHC","corHC")
vennDiagram(HC.pval.top1000)
mm4RvC.top1000<-mm4RvC.pval<mm4RvC.pval[order(mm4RvC.pval)[1001]]
oriRvC.top1000<-oriRvC.pval<oriRvC.pval[order(oriRvC.pval)[1001]]
combat.nonparRvC.top1000<-combat.nonparRvC.pval<combat.nonparRvC.pval[order(combat.nonparRvC.pval)[1001]]
RC.pval.top1000<-cbind(mm4RvC.top1000,oriRvC.top1000,combat.nonparRvC.top1000)
colnames(RC.pval.top1000)<-c("mm4RC","oriRC","corRC")
vennDiagram(RC.pval.top1000)
mm4HvC.top300<-mm4HvC.pval<mm4HvC.pval[order(mm4HvC.pval)[301]]
oriHvC.top300<-oriHvC.pval<oriHvC.pval[order(oriHvC.pval)[301]]
combat.nonparHvC.top300<-combat.nonparHvC.pval<combat.nonparHvC.pval[order(combat.nonparHvC.pval)[301]]
HC.pval.top300<-cbind(mm4HvC.top300,oriHvC.top300,combat.nonparHvC.top300)
colnames(HC.pval.top300)<-c("mm4HC","oriHC","corHC")
vennDiagram(HC.pval.top300)
mm4RvC.top300<-mm4RvC.pval<mm4RvC.pval[order(mm4RvC.pval)[301]]
oriRvC.top300<-oriRvC.pval<oriRvC.pval[order(oriRvC.pval)[301]]
combat.nonparRvC.top300<-combat.nonparRvC.pval<combat.nonparRvC.pval[order(combat.nonparRvC.pval)[301]]
RC.pval.top300<-cbind(mm4RvC.top300,oriRvC.top300,combat.nonparRvC.top300)
colnames(RC.pval.top300)<-c("mm4RC","oriRC","corRC")
vennDiagram(RC.pval.top300)
mm4HvC.top3000<-mm4HvC.pval<mm4HvC.pval[order(mm4HvC.pval)[3001]]
oriHvC.top3000<-oriHvC.pval<oriHvC.pval[order(oriHvC.pval)[3001]]
combat.nonparHvC.top3000<-combat.nonparHvC.pval<combat.nonparHvC.pval[order(combat.nonparHvC.pval)[3001]]
HC.pval.top3000<-cbind(mm4HvC.top3000,oriHvC.top3000,combat.nonparHvC.top3000)
colnames(HC.pval.top3000)<-c("mm4HC","oriHC","corHC")
vennDiagram(HC.pval.top3000)
ls()
str(log2.mm4.ribo.rpkm.Q)
batch
c(1:3,5,13:20)
var.weight<-matrix(nrow =length(log2.HCR.plus.ribo.rpkm.Q[,1]),ncol = 26 )
for (i in 1:length(log2.HCR.plus.ribo.rpkm.Q[,1])){
#chimp.var<-var(log2.HCR.plus.ribo.rpkm.Q[i,1:5],na.rm = T)
mm1.var<-var(log2.HCR.plus.ribo.rpkm.Q[i,6:9],na.rm = T)
mm2.var<-var(log2.HCR.plus.ribo.rpkm.Q[i,c(10,21,22,23)],na.rm = T)
mm7.var<-var(log2.HCR.plus.ribo.rpkm.Q[i,c(11,24,25,26)],na.rm = T)
#rhesus.var<-var(log2.HCR.plus.ribo.rpkm.Q[i,12:16],na.rm = T)
mm4.var<-var(log2.HCR.plus.ribo.rpkm.Q[i,c(1:3,5,13:20)],na.rm = T)
mm8.var<-var(log2.HCR.plus.ribo.rpkm.Q[i,c(4,12)],na.rm = T)
var.weight[i,]<-c(rep(1/mm4.var,3),1/mm8.var,1/mm4.var,rep(1/mm1.var,4),1/mm2.var,1/mm7.var,1/mm8.var,rep(1/mm4.var,8),rep(1/mm2.var,3),rep(1/mm7.var,3))
}
batch.removed.limma.weighted<-removeBatchEffect(log2.HCR.plus.ribo.rpkm.Q,batch = as.factor(batch),design = spec.design,weight=var.weight)
pc.limma.weighted<-prcomp(t(na.omit(batch.removed.limma.weighted[,1:16])),center = T,scale = T)
pc1.limma.wt<-pc.limma.weighted$x[,1]
pc2.limma.wt<-pc.limma.weighted$x[,2]
pc1.data<-cbind(pc1.ori,pc1.limma,pc1.limma.wt,pc1.combat.par,pc1.combat.nonpar)
colnames(pc1.data)<-c("original","limma","limma.wt","combat.par","combat.nonpar")
pc1.data<-melt(pc1.data)
pc2.data<-melt(cbind(pc2.ori,pc2.limma,pc2.limma.wt,pc2.combat.par,pc2.combat.nonpar))
pc.data<-cbind(pc1.data,pc2.data$value,spec[1:16],batch[1:16])
names(pc.data)<-c("ID","data","PC1","PC2","species","batch")
rbind(mm4.pc.data,pc.data)%>% ggplot(aes(x=PC1,y=PC2))+geom_point(aes(color = species, shape=batch))+facet_wrap(~data)+theme(panel.grid.minor=element_blank())
HCR.ribo.batch.corrected<-batch.removed.limma.weighted[,1:16]
limma.wt.lm.fit<-lmFit(HCR.ribo.batch.corrected,design = model.matrix(~ species.label))
limma.wtHvC.effect<-limma.wt.lm.fit$coefficient[,2]
limma.wtRvC.effect<-limma.wt.lm.fit$coefficient[,3]
limma.wt.de.test<-eBayes(limma.wt.lm.fit)
limma.wtHvC.pval<-limma.wt.de.test$p.value[,2]
limma.wtRvC.pval<-limma.wt.de.test$p.value[,3]
HvsC.pval<-c(
cor(mm4HvC.pval,oriHvC.pval, method = "spearman"),
cor(mm4HvC.pval,limmaHvC.pval, method = "spearman"),
cor(mm4HvC.pval,limma.wtHvC.pval, method = "spearman"),
cor(mm4HvC.pval,combat.parHvC.pval, method = "spearman"),
cor(mm4HvC.pval,combat.nonparHvC.pval, method = "spearman")
)
RvsC.pval<-c(
cor(mm4RvC.pval,oriRvC.pval, method = "spearman"),
cor(mm4RvC.pval,limmaRvC.pval, method = "spearman"),
cor(mm4RvC.pval,limma.wtRvC.pval, method = "spearman"),
cor(mm4RvC.pval,combat.parRvC.pval, method = "spearman"),
cor(mm4RvC.pval,combat.nonparRvC.pval, method = "spearman")
)
pval.cor<-as.data.frame(rbind(HvsC.pval,RvsC.pval))
names(pval.cor)<-c("original","limma","limma.wt","combat.par","combat.nonpar")
pval.cor
HvsC.beta<-c(
cor(mm4HvC.effect,oriHvC.effect, method = "spearman"),
cor(mm4HvC.effect,limmaHvC.effect, method = "spearman"),
cor(mm4HvC.effect,limma.wtHvC.effect, method = "spearman"),
cor(mm4HvC.effect,combat.parHvC.effect, method = "spearman"),
cor(mm4HvC.effect,combat.nonparHvC.effect, method = "spearman")
)
RvsC.beta<-c(
cor(mm4RvC.effect,oriRvC.effect, method = "spearman"),
cor(mm4RvC.effect,limmaRvC.effect, method = "spearman"),
cor(mm4RvC.effect,limma.wtRvC.effect, method = "spearman"),
cor(mm4RvC.effect,combat.parRvC.effect, method = "spearman"),
cor(mm4RvC.effect,combat.nonparRvC.effect, method = "spearman")
)
beta.cor<-as.data.frame(rbind(HvsC.beta,RvsC.beta))
names(beta.cor)<-c("original","limma","limma.wt","combat.par","combat.nonpar")
beta.cor
roc.curve<-function(pvalue1,pvalue2,cutoff,breaks,color){
TPR<-c()
FPR<-c()
truePositive <- pvalue1 < cutoff
trueNegative <- pvalue1 > cutoff
threshold<-seq(0,1,1/breaks)
for (i in 1:breaks+1){
Detected <- pvalue2 < threshold[i]
TPR[i] <- length(which(truePositive & Detected))/length(which(truePositive))
FPR[i] <- length(which(trueNegative & Detected))/length(which(trueNegative))
}
plot(FPR,TPR,xlim=c(0,1),ylim=c(0,1),col=color,pch=16,cex=0.4)
}
roc.curve(mm4HvC.pval,oriHvC.pval,0.01,1000,"black")
par(new=TRUE)
roc.curve(mm4HvC.pval,limmaHvC.pval,0.01,1000,"green")
par(new=TRUE)
roc.curve(mm4HvC.pval,limma.wtHvC.pval,0.01,1000,"yellow")
par(new=TRUE)
roc.curve(mm4HvC.pval,combat.parHvC.pval,0.01,1000,"blue")
par(new=TRUE)
roc.curve(mm4HvC.pval,combat.nonparHvC.pval,0.01,1000,"red")
legend("bottomright",c("ori","lm","lmwt","combat.p","combat.np"),col=c("black","green","yellow","blue","red"),pch = 16 ,cex = 0.75, pt.cex = 1,box.lwd = 0, ncol = 2)
roc.curve(mm4RvC.pval,oriRvC.pval,0.01,1000,"black")
par(new=TRUE)
roc.curve(mm4RvC.pval,limmaRvC.pval,0.01,1000,"green")
par(new=TRUE)
roc.curve(mm4RvC.pval,limma.wtRvC.pval,0.01,1000,"yellow")
par(new=TRUE)
roc.curve(mm4RvC.pval,combat.parRvC.pval,0.01,1000,"blue")
par(new=TRUE)
roc.curve(mm4RvC.pval,combat.nonparRvC.pval,0.01,1000,"red")
legend("bottomright",c("ori","lm","lmwt","combat.p","combat.np"),col=c("black","green","yellow","blue","red"), pch = 16 ,cex = 0.75, pt.cex = 1,box.lwd = 0, ncol = 2)
ls()
source(humanzee)
source("humanzee")
source("Humanzee")
source(Humanzee)
?Humanzee
libary(Humanzee)
library(Humanzee)
?Humanzee
?fit_lm()
fit_lm()
fit_lm
getwd()
getwd()
fit_lm
library(Humanzee)
fit_lm
?voom
library(limma)
?voom
library(nlme)
Oats
str(Oats)
plot(Oats)
lme
summary(lm(yield~nitro*Variety, data = Oats))
summary(lme(yield~nitro*Variety, data = Oats, random = 1~Block))
summary(lme(yield~nitro*Variety, data = Oats, random = 1/Block))
summary(lme(yield~nitro*Variety, data = Oats, random = ~1|Block))
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1|Block))
coefficients(lm(yield~nitro*Variety, data = Oats))
coefficients(lme(yield~nitro*Variety, data = Oats, random = Block))
coefficients(lme(yield~nitro*Variety, data = Oats, random = Variety | Block))
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~Variety | Block))
summary(lme(yield~nitro*Variety, data = Oats, random = ~Variety | Block))
coefficients(lm(yield~nitro*Variety, data = Oats))
summary(lme(yield~nitro*Variety, data = Oats, random = ~Variety | Block))
summary(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~Variety | Block))
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))
coefficients(lm(yield~nitro*Variety, data = Oats))
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))[1]
mean(coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))[1])
str(coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))[1])
mean(coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))[1]$(Intercept))
mean(coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))[1]$"(Intercept))"
mean(coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))[1]$"(Intercept)")
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~Variety | Block))[1]
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~Variety | Block))[5]
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~Variety | Block))[4]
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~Variety | Block))[4]
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))[4]
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~1 | Block))[3]
coefficients(lme(yield~nitro*Variety, data = Oats, random = ~Variety | Block))[3]
coefficients(lme(yield~nitro, data = Oats, random = ~Variety | Block))[3]
coefficients(lme(yield~nitro, data = Oats, random = ~Variety | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~Variety))
coefficients(lm(yield~nitro, data = Oats))
coefficients(lme(yield~nitro, data = Oats, random = ~1))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | block))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Block))
str(Oat)
str(Oats)
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~1))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~Variety | Variety))
summary(lme(yield~nitro, data = Oats, random = ~Variety | Variety))
summary(lme(yield~nitro, data = Oats, random = ~nitro | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~nitro | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~Variety | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~nitro | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~Variety | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~Block | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~Variety | Variety))
summary(lme(yield~nitro, data = Oats, random = ~1 | Variety))
summary(lme(yield~nitro, data = Oats, random = ~Variety | Variety))
summary(lme(yield~nitro, data = Oats, random = ~1 | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~Variety | Variety))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~Variety | Block))
summary(lme(yield~nitro, data = Oats, random = ~Variety | Block))
summary(lme(yield~nitro, data = Oats, random = ~1 | Block))
summary(lme(yield~nitro, data = Oats, random = ~1 | Block))
summary(lm(yield~nitro, data = Oats))
coefficients(lm(yield~nitro, data = Oats))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Block))
Oates
Oats
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Block))
summary(lme(yield~nitro, data = Oats, random = ~1 | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Block))
coefficients(lm(yield~nitro+Block, data = Oats))
coefficients(lm(yield~nitro+factor(Block), data = Oats))
coefficients(lme(yield~nitro, data = Oats, random = ~Block | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~nitro | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~yield | Block))
coefficients(lme(yield~nitro, data = Oats, random = ~Variety | Block))
coefficients(lm(yield~nitro+factor(Block), data = Oats))
coefficients(lme(yield~nitro, data = Oats, random = ~1 | Block))
coefficients(lme(yield~nitro, data = Oats))
coefficients(lm(yield~nitro, data = Oats))
plot(Oats)
str(Oats)
type(Oats$Block)
typeOF(Oats$Block)
typeof(Oats$Block)
typeof(as.factor(Oats$Block))
typeof(as(Oats$Block))
typeof(factor(Oats$Block))
getwd()
ls()
ls
ls()
head(res.riborna)
getwd()
load("../rdas/mm4.ribo.rda")
ls()
head(mm4.ribo)
load("../rdas/mm4plus/mm4.RPF.length.RData")
mm4.RPF.length
density(mm4.RPF.length)
density(mm4.RPF.length$length)
density(mm4.RPF.length$X19127)
plot(density(mm4.RPF.length$X19127))
plot(mm4.RPF.length$length,mm4.RPF.length$X19127)
plot(mm4.RPF.length$length,mm4.RPF.length$X19127/sum(mm4.RPF.length$X19127))
barplot(mm4.RPF.length$length,mm4.RPF.length$X19127/sum(mm4.RPF.length$X19127))
plot(mm4.RPF.length$length,mm4.RPF.length$X19127/sum(mm4.RPF.length$X19127))
prop.table(mm4.RPF.length[,-1],1)
prop.table(mm4.RPF.length[,-1],2)
mm4.RPF.length[,-1]
str(mm4.RPF.length[,-1])
rownames(mm4.RPF.length)<-mm4.RPF.length$length
mm4.RPF.length
mm4.RPF.length[,-1]
mm4.RPF.length[,-1]->mm4.RPF.length
mm4.RPF.length
mm4.RPF.length[1:21,]
mm4.RPF.length[1:22,]
mm4.RPF.length[1:21,]->mm4.RPF.length
mm4.RPF.length
prop.table(mm4.RPF.length,2)
prop.table(as.matrix(mm4.RPF.length),2)
prop.table(as.matrix(mm4.RPF.length),2)->mm4.RPF.length.prop
apply(mm4.RPF.length.prop,1,mean)
apply(mm4.RPF.length.prop,1,mean)->test.mean
apply(mm4.RPF.length.prop,1,sd)->test.sd
test.sd
library(ggplot)
library(ggplot2)
cbind(names(test.mean), test.mean,test.sd)
cbind(names(test.mean), test.mean,test.sd,quote=F)
as.data.frame(cbind(names(test.mean), test.mean,test.sd),quote=FALSE)
as.data.frame(cbind(names(test.mean), test.mean,test.sd),quote=FALSE)->test.data
test.data
names(test.data)<-c("length","mean","sd")
test.data
test.data$se<-test.data$sd/2
test.data
test.data$se<-(test.data$sd)/2
test.data$se<-(test.data$sd/2)
str(test.data)
as.data.frame(as.numeric(cbind(names(test.mean), test.mean,test.sd),quote=FALSE))->test.data
str(test.data)
as.data.frame(cbind(names(test.mean), test.mean,test.sd),quote=FALSE)->test.data
str(test.data)
str(as.numeric(test.data))
as.data.frame(cbind(names(test.mean), test.mean,test.sd))->test.data
str(as.numeric(test.data))
str(test.data)
as.data.frame(cbind(as.numeric(names(test.mean)), as.numeric(test.mean),as.numeric(test.sd)))->test.data
test.data
str(test.data)
names(test.data)
names(test.data)<-c("length","mean","sd")
test.data$se<-test.data$sd/2
test.data
test.data$se<-test.data$sd/sqrt(12)
test.data
ggplot(test.data,aes(x=length,y=mean)+geom_bar()+geom_errorbar(aes(ymin=mean-se, ymax=mean+se))
)
ggplot(test.data,aes(x=length,y=mean))+geom_bar()+geom_errorbar(aes(ymin=mean-se, ymax=mean+se))
ggplot(test.data,aes(x=length,y=mean))+geom_bar(stat="identity")+geom_errorbar(aes(ymin=mean-se, ymax=mean+se))
ggplot(test.data,aes(x=length,y=mean))+geom_bar(stat="identity", col="purple")+geom_errorbar(aes(ymin=mean-se, ymax=mean+se))
ggplot(test.data,aes(x=length,y=mean))+geom_bar(stat="identity", fill="purple")+geom_errorbar(aes(ymin=mean-se, ymax=mean+se))
ggplot(test.data,aes(x=length,y=mean))+geom_bar(stat="identity", fill="orange")+geom_errorbar(aes(ymin=mean-se, ymax=mean+se))
ggplot(test.data,aes(x=length,y=mean))+geom_bar(stat="identity", fill="blue")+geom_errorbar(aes(ymin=mean-se, ymax=mean+se))
ggplot(test.data,aes(x=length,y=mean))+geom_bar(stat="identity", fill="blue")+geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2)
ggplot(test.data,aes(x=length,y=mean))+geom_bar(stat="identity", fill="blue")+geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.4)
ggplot(test.data,aes(x=length,y=mean))+geom_bar(stat="identity", fill="blue")+geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.3)
mm4.RPF.length
mm4.RPF.length
load("../rdas/mm4plus/mm4.RPF.length.RData")
mm4.RPF.length
mm4.RPF.length<-mm4.RPF.length[1:21,]
mm4.RPF.length
prop.table(mm4.RPF.length[,-1],2)
prop.table(as.matrix(mm4.RPF.length[,-1]),2)
mm4.RPF.length.prop<-prop.table(as.matrix(mm4.RPF.length[,-1]),2)
str(mm4.RPF.length.prop)
grep("X",mm4.RPF.length.prop)
grep("X",names(mm4.RPF.length.prop))
grepl("X",names(mm4.RPF.length.prop))
names(mm4.RPF.length.prop)
grep("X",dimnames(mm4.RPF.length.prop))
dimnames(mm4.RPF.length.prop)
grep("X",as.data.frame(mm4.RPF.length.prop))
as.data.frame(mm4.RPF.length.prop)
grep("X",names(as.data.frame(mm4.RPF.length.prop)))
mm4.RPF.length.prop[,grep("X",names(as.data.frame(mm4.RPF.length.prop)))]
apply(mm4.RPF.length.prop[,grep("X",names(as.data.frame(mm4.RPF.length.prop)))],1,mean)->H.mean
apply(mm4.RPF.length.prop[,grep("X",names(as.data.frame(mm4.RPF.length.prop)))],1,sd)/2->H.se
H.mean
H.se
cbind(mm4.RPF.length$length,H.mean,H.se)
str(mm4.RPF.length$length,H.mean,H.se)
str(cbind(mm4.RPF.length$length,H.mean,H.se))
str(as.data.frame(cbind(mm4.RPF.length$length,H.mean,H.se)))
as.data.frame(cbind(mm4.RPF.length$length,H.mean,H.se))->H.data
names(H.data)<-c("length","proportion","se")
rep("human",21)
H.data$species<-rep("human",21)
H.data
apply(mm4.RPF.length.prop[,grep("C",names(as.data.frame(mm4.RPF.length.prop)))],1,mean)->C.mean
apply(mm4.RPF.length.prop[,grep("C",names(as.data.frame(mm4.RPF.length.prop)))],1,sd)/2->C.se
as.data.frame(cbind(mm4.RPF.length$length,C.mean,C.se))->C.data
names(C.data)<-c("length","proportion","se")
C.data$species<-rep("chimpanzee",21)
apply(mm4.RPF.length.prop[,grep("R",names(as.data.frame(mm4.RPF.length.prop)))],1,mean)->R.mean
apply(mm4.RPF.length.prop[,grep("R",names(as.data.frame(mm4.RPF.length.prop)))],1,sd)/2->R.se
as.data.frame(cbind(mm4.RPF.length$length,R.mean,R.se))->R.data
names(R.data)<-c("length","proportion","se")
R.data$species<-rep("rhesus",21)
R.data
length.data<-rbind(H.data,C.data,R.data)
ggplot(length.data,aes(x=length,y=proportion))+geom_bar(stat="identity", fill="blue")+geom_errorbar(aes(ymin=proportion-se, ymax=proportion+se), width=.3)+facet_wrap(facets = species)
ggplot(length.data,aes(x=length,y=proportion))+geom_bar(stat="identity", fill="blue")+geom_errorbar(aes(ymin=proportion-se, ymax=proportion+se), width=.3)+facet_wrap(~species)
load("../rdas/mm4plus/mm4.seqStat.RData")
median(as.matrix(mm4.seqStat[1,]))
ggplot(mm4.seqStat[1,])+geom_hist()
ggplot(mm4.seqStat[1,])+geom_histogram()
geom_histogram(mm4.seqStat[1,])
str(mm4.seqStat)
str(t(mm4.seqStat))
ggplot(t(mm4.seqStat))+geom_histogram("number of reads")
ggplot(as.data.frame(t(mm4.seqStat)))+geom_histogram("number of reads")
ggplot(as.data.frame(t(mm4.seqStat))$"number of reads")+geom_histogram()
ggplot(as.data.frame(t(mm4.seqStat)))+geom_histogram(as.data.frame(t(mm4.seqStat))$"number of reads")
qplot(mm4.seqStat[1,],geom="histogram")
t(mm4.seqStat)
str(t(mm4.seqStat))
str(as.data.frame(t(mm4.seqStat)))
qplot(as.data.frame(t(mm4.seqStat))$"number of reads",geom="histogram")
qplot(as.data.frame(t(mm4.seqStat))$"number of reads",geom="histogram",binwidth=10)
qplot(as.data.frame(t(mm4.seqStat))$"number of reads",geom="histogram",binwidth=0.1)
qplot(as.data.frame(t(mm4.seqStat))$"number of reads",geom="histogram",binwidth=1)
ggplot(as.data.frame(t(mm4.seqStat)),aes("number of reads"))+geom_histogram()
ggplot(as.data.frame(t(mm4.seqStat)),aes(as.data.frame(t(mm4.seqStat))$"number of reads"))+geom_histogram()
qplot(as.data.frame(t(mm4.seqStat))$"number of reads",geom="histogram",binwidth=1e+6)
qplot(as.data.frame(t(mm4.seqStat))$"number of reads",geom="histogram",binwidth=2e+6)
qplot(as.data.frame(t(mm4.seqStat))$"number of reads",geom="histogram",binwidth=5e+6)
qplot(as.data.frame(t(mm4.seqStat))$"number of reads",geom="histogram",binwidth=2e+6)
ggplot(as.data.frame(t(mm4.seqStat)),aes(as.data.frame(t(mm4.seqStat))$"number of reads"))+geom_histogram(binwidth=2e+6)
ggplot(as.data.frame(t(mm4.seqStat)),aes(as.data.frame(t(mm4.seqStat))$"number of reads"))+geom_histogram(binwidth=2e+6)
as.data.frame(t(mm4.seqStat)->mm4.seqStat
as.data.frame(t(mm4.seqStat))->mm4.seqStat
median(mm4.seqStat$`number of reads`)
ggplot(mm4.seqStat,aes(mm4.seqStat$"number of reads")+geom_histogram(binwidth=2e+6)
ggplot(mm4.seqStat,aes(mm4.seqStat$"number of reads"))+geom_histogram(binwidth=2e+6)
ggplot(mm4.seqStat,aes("number of reads"))+geom_histogram(binwidth=2e+6)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_abline(v=median(`number of reads`))
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_abline(v=median(mm4.seqStat$`number of reads`))
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_abline(v=median(mm4.seqStat$`number of reads`),color="yellow")
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_abline(position=median(mm4.seqStat$`number of reads`),color="yellow")
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_abline(aes(v=median(mm4.seqStat$`number of reads`)),color="yellow")
median(mm4.seqStat$`number of reads`)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_abline(aes(v=median(mm4.seqStat$`number of reads`)),color="red")
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_abline(aes(v=median(mm4.seqStat$`number of reads`)),colour="red")
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow")
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", width=3)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", lwidth=3)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", size=3)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", size=1.5)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", size=1)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", size=0.5)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", size=0.75)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=1e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", size=0.75)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", size=0.75)+xlab("number of uniquely mapped reads")
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", size=0.75)+xlab("number of sequecning reads")+ggtitle("Total number of uniquely mapped reads")
ggplot(mm4.seqStat,aes(`percent pass Q30`))+geom_bar(stat="identity")
ggplot(mm4.seqStat,aes(`percent pass Q30`))+geom_bar()
ggplot(mm4.seqStat,aes(`percent pass Q30`))+geom_bar(binwidth=0.1)
ggplot(mm4.seqStat,aes(`percent pass Q30`))+geom_bar(binwidth=0.05)
ggplot(mm4.seqStat,aes(`percent pass Q30`))+geom_bar(binwidth=0.05)+xlim(0.5,1)
ggplot(mm4.seqStat,aes(`percent pass Q30`))+geom_bar(binwidth=0.01)+xlim(0.5,1)
ggplot(mm4.seqStat,aes(`percent pass Q30`))+geom_bar(binwidth=0.01)+xlim(0.5,1)+xlab("proportion")+ggtitle("Proportion of sequencing reads pass Q30")
ggplot(mm4.seqStat,aes(`percent pass Q30`))+geom_bar(binwidth=0.01)+xlim(0.5,1)+xlab("proportion")+ggtitle("Proportion of sequencing reads pass Q30")+geom_vline(xintercept=0.95,colour="yellow", size=0.75)
getwd()
setwd("mm4plus")
library(ggplot2)
load("../../rdas/mm4plus/mm4.seqStat.RData")
as.data.frame(t(mm4.seqStat))->mm4.seqStat
median(mm4.seqStat$`number of reads`)
ggplot(mm4.seqStat,aes(`number of reads`))+geom_histogram(binwidth=2e+6)+geom_vline(xintercept=median(mm4.seqStat$`number of reads`),colour="yellow", size=0.75)+xlab("number of sequecning reads")+ggtitle("Total number of uniquely mapped reads")
ggplot(mm4.seqStat,aes(`percent pass Q30`))+geom_bar(binwidth=0.01)+xlim(0.5,1)+xlab("proportion")+ggtitle("Proportion of sequencing reads pass Q30")+geom_vline(xintercept=0.95,colour="yellow", size=0.75)
load("../../rdas/mm4plus/mm4.RPF.length.RData")
# remove na by skipping the last row
mm4.RPF.length<-mm4.RPF.length[1:21,]
# compute proportion by footprint length
mm4.RPF.length.prop<-prop.table(as.matrix(mm4.RPF.length[,-1]),2)
#compute human mean
apply(mm4.RPF.length.prop[,grep("X",names(as.data.frame(mm4.RPF.length.prop)))],1,mean)->H.mean
apply(mm4.RPF.length.prop[,grep("X",names(as.data.frame(mm4.RPF.length.prop)))],1,sd)/2->H.se
as.data.frame(cbind(mm4.RPF.length$length,H.mean,H.se))->H.data
names(H.data)<-c("length","proportion","se")
H.data$species<-rep("human",21)
# compute chimp mean
apply(mm4.RPF.length.prop[,grep("C",names(as.data.frame(mm4.RPF.length.prop)))],1,mean)->C.mean
apply(mm4.RPF.length.prop[,grep("C",names(as.data.frame(mm4.RPF.length.prop)))],1,sd)/2->C.se
as.data.frame(cbind(mm4.RPF.length$length,C.mean,C.se))->C.data
names(C.data)<-c("length","proportion","se")
C.data$species<-rep("chimpanzee",21)
# compute rhesus
apply(mm4.RPF.length.prop[,grep("R",names(as.data.frame(mm4.RPF.length.prop)))],1,mean)->R.mean
apply(mm4.RPF.length.prop[,grep("R",names(as.data.frame(mm4.RPF.length.prop)))],1,sd)/2->R.se
as.data.frame(cbind(mm4.RPF.length$length,R.mean,R.se))->R.data
names(R.data)<-c("length","proportion","se")
R.data$species<-rep("rhesus",21)
length.data<-rbind(H.data,C.data,R.data)
# ggplot to visualize length distribution by species. Use scale_fill_manual to change default color to the color of choice by manually mapping the species name to color name. Use element_blank() to remove title for each subplot (strip)
ggplot(length.data,aes(x=length,y=proportion, fill=species))+geom_bar(stat="identity")+geom_errorbar(aes(ymin=proportion-se, ymax=proportion+se), width=.3)+facet_grid(species ~ .)+scale_fill_manual(values = c("human"="black","chimpanzee"="sky blue","rhesus"="dark orange"))+ggtitle(label="RPF length distribution")+theme(strip.background = element_blank(), strip.text = element_blank())+xlab("length(nt)")
