data.frame(beta = per_gene[4, 1],
se = per_gene[4, 2])
})
betas_df <- do.call(rbind, betas_df)
head(betas_ef)
head(betas_df)
beta.ash <- ash(betas_df[,1], betas_df[,2])
summary(fit_interact_try)
beta.ash <- ash(betas_df[,1], betas_df[,2], df = 16)
str(beta.ash)
hist(beta.ash$qvalue)
sum(beta.ash$qvalue < .01)
hist(beta.ash$lfdr)
plot(x = beta_df[,1],
y = beta.ash$PosteriorMean,
xlab = "Regression coefficients",
ylab = "Posterior means")
plot(x = betas_df[,1],
y = beta.ash$PosteriorMean,
xlab = "Regression coefficients",
ylab = "Posterior means")
abline(0, 1, col = "red")
abline(h = 0, v = 0, col = "blue")
table(betas_df$fitted.g$pi)
table(beta.ash$fitted.g$pi)
table( round(beta.ash$fitted.g$pi, 3) )
str(beta.ash)
sum(beta.ash$qvalue < .01)
load(file.path(rdadir, "TEnew.rda"))
sum(res.riborna$int.qval < .01)
plot(x = betas_df[,1],
y = beta.ash$PosteriorMean,
xlab = "Regression coefficients",
ylab = "Posterior means")
abline(0, 1, col = "red")
abline(h = 0, v = 0, col = "blue")
load(file = file.path(rdadir,"TEnew.rda"))
riborna_coef[[1]]
pvals <- sapply(riborna_coef, function(per_gene) {
per_gene[4,4]
})
pvals
hist(pvals)
beta_interact_fdr <- qvalue(pvals)
beta_interact_fdr$pi0
sum(beta_interact_fdr$qvalues < .01)
sum(beta.ash$qvalue < .01)
str(beta.ash)
sum(beta.ash$lfsr < .01)
load(file.path(rdadir,"eSetRRP.rda"))
# Human vs. Chimp
eSet_human_chimp <- eSetRRP.RP.Q.log2[ ,
eSetRRP.RP.Q.log2$seqData != "protein" & eSetRRP.RP.Q.log2$species != "rhesus"]
riborna_coef_human_chimp <- interact2way_coef(eSet_human_chimp)
# Human vs. Rhesus
eSet_human_rhesus <- eSetRRP.RP.Q.log2[ ,
eSetRRP.RP.Q.log2$seqData != "protein" & eSetRRP.RP.Q.log2$species != "chimp"]
riborna_coef_human_rhesus <- interact2way_coef(eSet_human_rhesus)
# Chimp vs. Rhesus
eSet_chimp_rhesus <- eSetRRP.RP.Q.log2[ ,
eSetRRP.RP.Q.log2$seqData != "protein" & eSetRRP.RP.Q.log2$species != "human"]
riborna_coef_chimp_rhesus <- interact2way_coef(eSet_chimp_rhesus)
save(riborna_coef_human_chimp,
riborna_coef_human_rhesus,
riborna_coef_chimp_rhesus, file = file.path(rdadir,"riborna_coef.rda"))
pvals_human_chimp <- sapply(riborna_coef_human_chimp, function(per_gene) {
per_gene[4,4]
})
hist(pvals_human_chimp, main = "Human vs. Chimp: p-values", xlab = "p-values")
pvals_human_rhesus <- sapply(riborna_coef_human_rhesus, function(per_gene) {
per_gene[4,4]
})
hist(pvals_human_rhesus, main = "Human vs. Rhesus: p-values", xlab = "p-values")
pvals_chimp_rhesus <- sapply(riborna_coef_chimp_rhesus, function(per_gene) {
per_gene[4,4]
})
hist(pvals_chimp_rhesus, main = "Chimp vs. Rhesus: p-values", xlab = "p-values")
load(file.path(rdadir, "TEnew.rda"))
plot(x = res.riborna$int.pval,
y = pvals_human_chimp, xlab = "LR statistic p-values", "beta p-values")
plot(x = res.riborna$int.pval,
y = pvals_human_chimp, xlab = "LR statistic p-values", ylab = "beta p-values")
abline(0, 1, col = "red")
plot(x = res.riborna$int.pval,
y = pvals_human_chimp, xlab = "LR statistic p-values", ylab = "beta p-values",
xlim = c(0, 1), ylim = c(0, 1))
abline(0, 1, col = "red")
load(file.path(rdadir, "TE_other_interspecies.rda"))
plot(x = res.riborna_human_rhesus$int.pval,
y = pvals_human_rhesus, xlab = "LR statistic p-values", ylab = "beta p-values",
xlim = c(0, 1), ylim = c(0, 1))
abline(0, 1, col = "red")
plot(x = res.riborna_chimp_rhesus$int.pval,
y = pvals_chimp_rhesus, xlab = "LR statistic p-values", ylab = "beta p-values",
xlim = c(0, 1), ylim = c(0, 1))
abline(0, 1, col = "red")
library(gplots)
?venn
head(res.riborna)
venn(
data.frame(human_chimp = res.riborna$ENSGID[res.riboran$int.qval < .01],
human_rhesus = res.riborna_human_rhesus$ENSGID[res.riborna_human_rhesus$int.qval < .01],
chimp_rhesus = res.riborna_chimp_rhesus$ENSGID[res.riborna_chimp_rhesus$int.qval < .01])
)
venn(
data.frame(human_chimp = res.riborna$ENSGID[res.riborna$int.qval < .01],
human_rhesus = res.riborna_human_rhesus$ENSGID[res.riborna_human_rhesus$int.qval < .01],
chimp_rhesus = res.riborna_chimp_rhesus$ENSGID[res.riborna_chimp_rhesus$int.qval < .01])
)
venn(
data.frame(human_chimp = res.riborna$int.qval < .01,
human_rhesus = res.riborna_human_rhesus$int.qval < .01,
chimp_rhesus = res.riborna_chimp_rhesus$int.qval < .01) )
sum(res.riborna$int.qval < .01)
venn(data.frame(human_chimp = res.riborna$int.qval < .01,
human_rhesus = res.riborna_human_rhesus$int.qval < .01,
chimp_rhesus = res.riborna_chimp_rhesus$int.qval < .01) )
qvals_human_chimp <- qvalues(pvals_human_chimp)$qvalue
qvals_human_rhesus <- qvalues(pvals_human_rhesus)$qvalue
qvals_chimp_rhesus <- qvalues(pvals_chimp_rhesus)$qvalue
qvals_human_chimp <- qvalue(pvals_human_chimp)$qvalue
qvals_human_rhesus <- qvalue(pvals_human_rhesus)$qvalue
qvals_chimp_rhesus <- qvalue(pvals_chimp_rhesus)$qvalue
venn(data.frame(human_chimp = qvals_human_chimp < .01,
human_rhesus = qvals_human_rhesus < .01,
chimp_rhesus = qvals_chimp_rhesus < .01) )
?gls
require(limma)
voom
ls()
df_riborna <- eSetRRP.RP[ , eSetRRP.RP$seqData != "protein"]
pData(df_riborna)
df_riborna <- eSetRRP.RP[ , eSetRRP.RP$seqData != "protein" & eSetRRP.RP$species != "rhesus"]
library(limma)
?voom
head(exprs(df_riboran))
head(exprs(df_riborna))
ls()
load(file.path(rdadir,"datasub.rda"))
load(file.path(rdadir,"datasub.rda"))
genes_sub <- fDta(eSetRRP.RP.Q.log2)
genes_sub <- fData(eSetRRP.RP.Q.log2)
genes_sub
head(genes_sub)
head(which(fData(eSetNone) %in% gene_sub))
head(which(fData(eSetNone) %in% genes_sub))
fData(eSetNone)
head(fData(eSetNone))
head( which(fData(eSetNone)$ENSGID %in% gene_sub))
head( which(fData(eSetNone)$ENSGID %in% genes_sub))
head(fData(eSetNone))
fData(eSetNone)$ENSGID
head(fData(eSetNone)$ENSGID)
head(genes_sub)
genes_sub <- fData(eSetRRP.RP.Q.log2)$ENSGID
head(which(fData(eSetNone)$ENSGID %in% genes_sub))
str(which(fData(eSetNone)$ENSGID %in% genes_sub))
eSet_sub <- eSetNone[ which(fData(eSetNone)$ENSGID %in% genes_sub), ]
head(exprs(eSet_sub))
eSet_sub <- eSetNone[ which(fData(eSetNone)$ENSGID %in% genes_sub),
eSetNone$species != "rhesus"]
pData(eSet_sub)
?voom
head(exprs(eSet_sub))
model.matrix( ~ seqData*species, pData(eSet_sub))
voom(exprs(eSet_sub),
design = model.matrix( ~ as.factor(seqData)*as.factor(species), pData(eSet_sub)), normalize.method = "quantile")
model.matrix( ~ as.factor(seqData)*as.factor(species), pData(eSet_sub))
model.matrix( ~ as.factor(seqData)*as.factor(species), data = pData(eSet_sub))
voom(coutns = exprs(eSet_sub),
design = model.matrix( ~ as.factor(seqData)*as.factor(species), data = pData(eSet_sub)) )
voom(counts = exprs(eSet_sub),
design = model.matrix( ~ as.factor(seqData)*as.factor(species), data = pData(eSet_sub)) )
voom(counts = exprs(eSet_sub) )
summary(exprs(eSet_sub))
voom
voom(counts = exprs(eSet_sub),
lib.size = colSums(exprs(eSet_sub), na.rm = TRUE),
design = model.matrix( ~ as.factor(seqData)*as.factor(species), data = pData(eSet_sub)) ), normalize.method = "quantile")
voom(counts = exprs(eSet_sub),
lib.size = colSums(exprs(eSet_sub), na.rm = TRUE),
design = model.matrix( ~ as.factor(seqData)*as.factor(species), data = pData(eSet_sub)) )
traceback()
voom(counts = exprs(eSet_sub),
lib.size = colSums(exprs(eSet_sub), na.rm = TRUE),
design = model.matrix( ~ as.factor(seqData)*as.factor(species), data = pData(eSet_sub)) )
voom
voom_NA <- function (counts, design = NULL, lib.size = NULL, normalize.method = "none",
plot = FALSE, span = 0.5, ...)
{
out <- list()
if (is(counts, "DGEList")) {
out$genes <- counts$genes
out$targets <- counts$samples
if (is.null(design) && diff(range(as.numeric(counts$sample$group))) >
0)
design <- model.matrix(~group, data = counts$samples)
if (is.null(lib.size))
lib.size <- with(counts$samples, lib.size * norm.factors)
counts <- counts$counts
}
else {
isExpressionSet <- suppressPackageStartupMessages(is(counts,
"ExpressionSet"))
if (isExpressionSet) {
if (length(Biobase::fData(counts)))
out$genes <- Biobase::fData(counts)
if (length(Biobase::pData(counts)))
out$targets <- Biobase::pData(counts)
counts <- Biobase::exprs(counts)
}
else {
counts <- as.matrix(counts)
}
}
if (is.null(design)) {
design <- matrix(1, ncol(counts), 1)
rownames(design) <- colnames(counts)
colnames(design) <- "GrandMean"
}
if (is.null(lib.size))
lib.size <- colSums(counts)
y <- t(log2(t(counts + 0.5)/(lib.size + 1) * 1e+06))
y <- normalizeBetweenArrays(y, method = normalize.method)
fit <- lmFit(y, design, ...)
if (is.null(fit$Amean))
fit$Amean <- rowMeans(y, na.rm = TRUE)
sx <- fit$Amean + mean(log2(lib.size + 1)) - log2(1e+06)
sy <- sqrt(fit$sigma)
allzero <- rowSums(counts) == 0
if (any(allzero)) {
sx <- sx[!allzero]
sy <- sy[!allzero]
}
l <- lowess(sx, sy, f = span)
if (plot) {
plot(sx, sy, xlab = "log2( count size + 0.5 )", ylab = "Sqrt( standard deviation )",
pch = 16, cex = 0.25)
title("voom: Mean-variance trend")
lines(l, col = "red")
}
f <- approxfun(l, rule = 2)
if (fit$rank < ncol(design)) {
j <- fit$pivot[1:fit$rank]
fitted.values <- fit$coef[, j, drop = FALSE] %*% t(fit$design[,
j, drop = FALSE])
}
else {
fitted.values <- fit$coef %*% t(fit$design)
}
fitted.cpm <- 2^fitted.values
fitted.count <- 1e-06 * t(t(fitted.cpm) * (lib.size + 1))
fitted.logcount <- log2(fitted.count)
w <- 1/f(fitted.logcount)^4
dim(w) <- dim(fitted.logcount)
out$E <- y
out$weights <- w
out$design <- design
if (is.null(out$targets))
out$targets <- data.frame(lib.size = lib.size)
else out$targets$lib.size <- lib.size
new("EList", out)
}
voom_NA <- function (counts, design = NULL, lib.size = NULL, normalize.method = "none",
plot = FALSE, span = 0.5, ...)
{
out <- list()
if (is(counts, "DGEList")) {
out$genes <- counts$genes
out$targets <- counts$samples
if (is.null(design) && diff(range(as.numeric(counts$sample$group))) >
0)
design <- model.matrix(~group, data = counts$samples)
if (is.null(lib.size))
lib.size <- with(counts$samples, lib.size * norm.factors)
counts <- counts$counts
}
else {
isExpressionSet <- suppressPackageStartupMessages(is(counts,
"ExpressionSet"))
if (isExpressionSet) {
if (length(Biobase::fData(counts)))
out$genes <- Biobase::fData(counts)
if (length(Biobase::pData(counts)))
out$targets <- Biobase::pData(counts)
counts <- Biobase::exprs(counts)
}
else {
counts <- as.matrix(counts)
}
}
if (is.null(design)) {
design <- matrix(1, ncol(counts), 1)
rownames(design) <- colnames(counts)
colnames(design) <- "GrandMean"
}
if (is.null(lib.size))
lib.size <- colSums(counts)
y <- t(log2(t(counts + 0.5)/(lib.size + 1) * 1e+06))
y <- normalizeBetweenArrays(y, method = normalize.method)
fit <- lmFit(y, design, ...)
if (is.null(fit$Amean))
fit$Amean <- rowMeans(y, na.rm = TRUE)
sx <- fit$Amean + mean(log2(lib.size + 1)) - log2(1e+06)
sy <- sqrt(fit$sigma)
allzero <- rowSums(counts, na.rm = TRUE) == 0
if (any(allzero)) {
sx <- sx[!allzero]
sy <- sy[!allzero]
}
l <- lowess(sx, sy, f = span)
if (plot) {
plot(sx, sy, xlab = "log2( count size + 0.5 )", ylab = "Sqrt( standard deviation )",
pch = 16, cex = 0.25)
title("voom: Mean-variance trend")
lines(l, col = "red")
}
f <- approxfun(l, rule = 2)
if (fit$rank < ncol(design)) {
j <- fit$pivot[1:fit$rank]
fitted.values <- fit$coef[, j, drop = FALSE] %*% t(fit$design[,
j, drop = FALSE])
}
else {
fitted.values <- fit$coef %*% t(fit$design)
}
fitted.cpm <- 2^fitted.values
fitted.count <- 1e-06 * t(t(fitted.cpm) * (lib.size + 1))
fitted.logcount <- log2(fitted.count)
w <- 1/f(fitted.logcount)^4
dim(w) <- dim(fitted.logcount)
out$E <- y
out$weights <- w
out$design <- design
if (is.null(out$targets))
out$targets <- data.frame(lib.size = lib.size)
else out$targets$lib.size <- lib.size
new("EList", out)
}
voom_NA(counts = exprs(eSet_sub),
lib.size = colSums(exprs(eSet_sub), na.rm = TRUE),
design = model.matrix( ~ as.factor(seqData)*as.factor(species), data = pData(eSet_sub)) )
voom_fit <- voom_NA(counts = exprs(eSet_sub),
lib.size = colSums(exprs(eSet_sub), na.rm = TRUE),
design = model.matrix( ~ as.factor(seqData)*as.factor(species), data = pData(eSet_sub)) )
names(voom_fit)
head(voom_fit$weights)
install_github("jhsiao999/Humanzee")
require(Humanzee)
voom_fit <-
Humanzee::voom_NA(counts = exprs(eSet_sub),
lib.size = colSums(exprs(eSet_sub), na.rm = TRUE),
design = model.matrix( ~ as.factor(seqData)*as.factor(species),
data = pData(eSet_sub)) ,
normalize.method = "quantile")
install_github("jhsiao999/Humanzee")
require(Humanzee)
voom_fit <-
Humanzee::voom_NA(counts = exprs(eSet_sub),
lib.size = colSums(exprs(eSet_sub), na.rm = TRUE),
design = model.matrix( ~ as.factor(seqData)*as.factor(species),
data = pData(eSet_sub)) ,
normalize.method = "quantile")
names(voom_fit)
?lmFit
load(file.path(rdadir, "eSetRRP.rda"))
eSet_human_chimp <- eSetRRP.RP.Q.log2[ ,
eSetRRP.RP.Q.log2$seqData != "protein" & eSetRRP.RP.Q.log2$species != "rhesus"]
lm
head(voom_fit$weights)
interact2way_coef_ww <- function (eSet, weights)
{
fNames <- featureNames(eSet)
require(nlme)
gls.res <- lapply(1:length(fNames), function(i) {
mat1 <- eSet[featureNames(eSet) == fNames[i], ]
mat1aov.temp <- data.frame(cov = c(t(exprs(mat1))), seqData = mat1$seqData,
species = mat1$species, celline = mat1$celline)
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
fit_interact_try <- tryCatch(fit_interact <- gls(cov ~
species * seqData, weights = weights[i, ],
data = mat1aov.temp, na.action = na.omit),
condition = function(c) c)
coef_table <- summary(fit_interact_try)$tTable
return(coef_table)
})
names(gls.res) <- fNames
return(gls.res)
}
names(voom_fit)
eSet_human_chimp <- eSetRRP.RP.Q.log2[ ,
eSetRRP.RP.Q.log2$seqData != "protein" & eSetRRP.RP.Q.log2$species != "rhesus"]
interact2way_coef_ww <- function (eSet, weights)
{
fNames <- featureNames(eSet)
require(nlme)
gls.res <- lapply(1:length(fNames), function(i) {
mat1 <- eSet[featureNames(eSet) == fNames[i], ]
mat1aov.temp <- data.frame(cov = c(t(exprs(mat1))), seqData = mat1$seqData,
species = mat1$species, celline = mat1$celline)
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
fit_interact_try <- tryCatch(fit_interact <- gls(cov ~
species * seqData, weights = weights[i, ],
data = mat1aov.temp, na.action = na.omit),
condition = function(c) c)
coef_table <- summary(fit_interact_try)$tTable
return(coef_table)
})
names(gls.res) <- fNames
return(gls.res)
}
riborna_coef_human_chimp <-
interact2way_coef_ww(eSet_human_chimp, weights = voom_fit$weights)
head(weights = voom_fit$weights)
head(voom_fit$weights)
voom_fit$weights[1,]
eSet = eSet_human_chimp
weights = voom_fit$weights
fNames <- featureNames(eSet)
require(nlme)
i = 1
mat1 <- eSet[featureNames(eSet) == fNames[i], ]
mat1aov.temp <- data.frame(cov = c(t(exprs(mat1))), seqData = mat1$seqData,
species = mat1$species, celline = mat1$celline)
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
fit_interact_try <- tryCatch(fit_interact <- gls(cov ~
species * seqData, weights = weights[i, ],
data = mat1aov.temp, na.action = na.omit),
condition = function(c) c)
fit_interact_try
lmFit
?lmFit
head(voom_fit$E)
fit <- lmFit(voom_fit$E,
design = model.matrix( ~ as.factor(seqData)*as.factor(species),
data = pData(eSet_sub)),
weights = voom_fit$weights)
names(fit)
head(fit$coef)
fit <- eBayes(fit)
?eBayes
?contrasts.fit
contrast_fit <- contrast.fit(fit, contrasts = cbind(0, 0, 0, 1))
contrast_fit <- contrasts.fit(fit, contrasts = cbind(0, 0, 0, 1))
contrast_fit <- contrasts.fit(fit, contrasts = cbind(c(0, 0, 0, 1)) )
contrast_fit
contrast_fit <- eBayes(contrast_fit)
contrast_fit
names(contrast_fit)
head(contrast_fit$p.value)
hist(contrast_fit$p.value, main = "Interaction p-value")
names(contrast_fit)
qvals <- qvalue(contrast_fit$p.value)$qvalue
sum(qvals < .01)
hist(contrast_fit$F.p.value, main = "Interaction p-value")
qvals <- qvalue(contrast_fit$F.p.value)$qvalue
sum(qvals < .01)
contrast_fit$contrast
load(file = file.path(rdadir, "riborna_coef.rda") )
pvals <- sapply(riborna_coef, function(per_gene) {
per_gene[4,4]
})
hist(pvals)
load(file = file.path(rdadir, "riborna_coef.rda") )
pvals <- sapply(riborna_coef_human_chimp, function(per_gene) {
per_gene[4,4]
})
hist(pvals)
load(file = file.path(rdadir,"riborna_coef.rda"))
betas_df <- lapply(riborna_coef_human_chimp, function(per_gene) {
data.frame(beta = per_gene[4, 1],
se = per_gene[4, 2])
})
betas_df <- do.call(rbind, betas_df)
head(betas_df)
beta.ash <- ash(betas_df[,1], betas_df[,2], df = 16)
str(beta.ash)
plot(x = betas_df[,1],
y = beta.ash$PosteriorMean,
xlab = "Regression coefficients",
ylab = "Posterior means")
abline(0, 1, col = "red")
abline(h = 0, v = 0, col = "blue")
.784+.148
.784+.148+.016
.784+.148+.0677
sum(beta.ash$lfsr < .01)
str(beta.ash)
with(beta.ash, fitted.g$b[fitted.g$pi != 0])
with(beta.ash, fitted.g$pi[fitted.g$pi != 0])
with(beta.ash, round(rfitted.g$pi[fitted.g$pi != 0]), 3)
with(beta.ash, round(fitted.g$pi[fitted.g$pi != 0]), 3)
with(beta.ash, round(fitted.g$pi[fitted.g$pi != 0], 3) )
with(beta.ash, round(fitted.g$pi[fitted.g$pi != 0], 4) )
with(beta.ash, fitted.g$b[fitted.g$pi != 0])
hist(betas_df$beta)
summary(betas_df$beta)
plot(x = betas_df[,1],
y = beta.ash$PosteriorMean,
xlab = "Regression coefficients",
ylab = "Posterior means")
abline(0, 1, col = "red")
abline(h = 0, v = 0, col = "blue")
names(beta.ash)
str(beta.ash)
hist(beta.ash$ZeroProb)
sum(beta.ash$ZeroProb < .01)
sum(beta.ash$ZeroProb < .1)
sum(beta.ash$lfsr < .1)
