anova
?anova
aov <- anova.lme(fit_null_try, fit_interact_try)
aov <- anova.lme(fit_null_try, fit_interact_try, test = FALSE)
aov <- anova.lme(fit_null_try, fit_interact_try)
lrtest(fit_null, fit_interact)
fit_interact
fit_null
lrtest(fit_interact, fit_null)
?lrtest
?gls
gls.res <- lapply(1:5, function(i) {
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit,
verbose = FALSE),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LR.pval = NA)
} else {
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit,
verbose = FALSE),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LR.pval = NA)
} else {
aov <- anova.lme(fit_null_try, fit_interact_try)
res <- data.frame(LR.pval = aov[2,"p-value"])
}
return(res)
}
})
gls.res
pval <- do.call(rbind, gls.res)
int.qval <- get.qval(pval$LR.pval)
get.qval
testDE
require(lrtest)
?lrtest
lrtest(fit_interact, fit_null)
fit_interact
fit_null
anova(fit_null_try, fit_interact_try)
pval <- do.call(rbind, gls.res)
pval
int.qval <- get.qval(pval$LR.pval)
install_github("jhsiao999/Humanzee")
install_github("jhsiao999/Humanzee")
require(Humanzee)
load(file.path(rdadir,"eSetRRP.rda"))
res.riborna <- interact2way(
eSetRRP.RP.Q.log2[ , eSetRRP.RP.Q.log2$species != "rhesus" &
eSetRRP.RP.Q.log2$seqData != "protein"])
head(res.riborna)
sum(res.riborna$int.qval < .01)
eSetRRP.RP.Q.log2
hist(res.riborna$int.pval)
hist(res.riborna$int.qal)
hist(res.riborna$int.qval)
require(qvalue)
dd <- qvalue(res.riborna$int.pval)
str(dd)
sum(dd$qvalue < .01)
install_github("jhsiao999/Humanzee")
require(Humanzee)
load(file.path(rdadir,"eSetRRP.rda"))
res.riborna2 <- interact2way_full_buffer(
eSetRRP.RP.Q.log2[ , eSetRRP.RP.Q.log2$species != "rhesus" &
eSetRRP.RP.Q.log2$seqData != "protein"])
install_github("jhsiao999/Humanzee")
require(Humanzee)
res.riborna2 <- interact2way_full_buffer(
eSetRRP.RP.Q.log2[ , eSetRRP.RP.Q.log2$species != "rhesus" &
eSetRRP.RP.Q.log2$seqData != "protein"])
sum(res.riborna2$int.qval <.01)
summary(exprs(eSetRRP.RP.Q
))
summary(exprs(eSetRRP.RP.Q.log2))
dim(eSetRRP.RP.Q.log2)
load(file.path(rdadir, "TEnew.rda"))
sum(res.riborna$int.qval <.01)
rm(list=ls())
library(Biobase)
rm(list=ls())
dir <- "../../project"
figdir <- file.path(dir,"figures")
rdadir <- file.path(dir,"rdas")
install_github("jhsiao999/Humanzee")
require(Humanzee)
load(file.path(rdadir,"eSetRRP.rda"))
res.riborna2 <- interact2way_full_buffer(
eSetRRP.RP.Q.log2[ , eSetRRP.RP.Q.log2$species != "rhesus" &
eSetRRP.RP.Q.log2$seqData != "protein"])
sum(res.riborna2$int.qval < .01)
load(file.path(rdadir, "TEnew.rda"))
head(res.riborna)
head(res.riborna[,1:2])
head(res.riborna2)
?all.equal
all.equal(res.riborna$int.pval, res.riborna2$int.pval)
a <- qvalue(res.riborna2$int.pval)
str(a)
a <- qvalue(res.riborna2$int.pval)$qvalue
sum(a < .01)
a <- qvalue(res.riborna$int.pval)$qvalue
sum(a < .01)
load(file.path(rdadir, "TEnew.rda"))
dim(res.riborna)
res.riborna[1:3, 1:3]
res.riborna2[1:3, 1:3]
a <- qvalue(res.riborna$int.pval)$qvalue
sum(a < .01)
head(a)
qvalue()
qvalue
?qvalue
plot(res.riborna$int.pval, res.riborna2$int.pval)
b <- get_qval(res.riboran$int.pval)
b <- get_qval(res.riborna$int.pval)
head(b)
sum(a < .01)
sum(b < .01)
p.adjust(res.riborna$int.pval)
a <- p.adjust(res.riborna$int.pval, method = "fdr")
str(a)
sum(a < .01)
?p.adjust
a <- p.adjust(res.riborna$int.pval, method = "hochberg")
sum(a < .01)
hist(res.riborna$int.pval)
load(file.path(rdadir, "TEnew.rda"))
plot(res.riborna$int.pval, res.riborna2$int.pval)
load(file.path(rdadir, "riborna.rda"))
plot(res.riborna$int.pval, res.riborna2$int.pval)
head(res.riborna)
sum(res.riborna$int.qval <.01)
sum(res.riborna$int.qval<.01)
load(file.path(rdadir, "TEnew.rda"))
sum(res.riborna$int.qval<.01)
sum(res.riborna2$int.qval<.01)
biocLite("qvaule")
biocLite("qvalue")
require(qvalue)
a <- qvalue(res.riborna$int.pval)$qvalue
sum(a < .01)
interact2way_full_buffer <- function(eSet) {
# eSet = eSetRRP.log2.Qmed[,eSetRRP.log2.Qmed$species!="rhesus" & eSetRRP.log2.Qmed$seqData!="ribo"]
source(file.path(codedir,"DEtesting.r"))
fNames = featureNames(eSet)
require(nlme)
require(parallel)
require(contrast)
#   gls.res = lapply(1:10, function(i) {
gls.res = lapply(1:length(fNames), function(i) {
mat1 = eSet[featureNames(eSet)==fNames[i],]
mat1aov.temp = data.frame(cov=c(t(exprs(mat1))),seqData=mat1$seqData,
species=mat1$species,celline=mat1$celline,
dummy.var=as.integer(mat1$seqData==head(rev(unique(mat1$seqData)),1)))
mat1aov.temp$dummy.var = as.factor(mat1aov.temp$dummy.var)
mat1aov.temp$species = as.factor(mat1aov.temp$species)
tmp0 = tryCatch(fit0 <- gls(cov~species+dummy.var,
weights=varIdent(form=~1|dummy.var),data=mat1aov.temp,
na.action=na.omit),
error = function(c) list("error", conditionMessage(c)) )
if (length(tmp0)==2) {
res <- data.frame(LR.pval=NA,coef.pval=NA,dummy1=NA,dummy0=NA)
} else {
fit1 = tryCatch(foo <- gls(cov~species*dummy.var,
weights=varIdent(form=~1|dummy.var),data=mat1aov.temp,na.action=na.omit),
error = function(c) list("error", conditionMessage(c)))
if (length(fit1)==2) {
res = data.frame(LR.pval=NA,coef.pval=NA,dummy1=NA,dummy0=NA)
} else {
aov <- anova(tmp0,fit1)
res <- data.frame(LR.pval = aov[2,"p-value"],
coef.pval = summary(fit1)$tTable[4,4])
fit <- gls(cov~species*dummy.var-1,
weights=varIdent(form=~1|dummy.var),
data=mat1aov.temp,na.action=na.omit)
contrast.res1 <- contrast(fit,a=list(dummy.var="1",species="human"),
b=list(dummy.var="1",species="chimp"))
contrast.res0 <- contrast(fit,a=list(dummy.var="0",species="human"),
b=list(dummy.var="0",species="chimp"))
# dummy.var = 0 for protein and dummy.var = 1 for ribo
# b1,b2,b3,b4 below correspond to the coef. in the model matrix of fit
# pro_chimp (b3-b4) + ribo_human (b2-b4)- pro_human (b3-(b3-b4)) - ribo_chimp (b1-(b3-b4))= 0
# equivalent to: -b1+b2+2b3-4b4=0
#           contrast.buff=anova(fit,L=c(-1,1,2,-4))
#           buff.dir = mean(mat1aov.temp$cov[6:10],na.rm=TRUE)-mean(mat1aov.temp$cov[1:5],
#                   na.rm=TRUE)-(mean(mat1aov.temp$cov[16:20],na.rm=TRUE)-mean(mat1aov.temp$cov[11:15],na.rm=TRUE))
#           if (buff.dir > 0) {  buff.pval= contrast.buff$p/2 }
#           if (buff.dir < 0) {  buff.pval= 1-contrast.buff$p/2 }
#           res = data.frame(res,dummy1=contrast.res1$Pvalue,
#                            dummy0=contrast.res0$Pvalue,
#                            buff=buff.pval)
res = data.frame(res,dummy1=contrast.res1$Pvalue,
dummy0=contrast.res0$Pvalue,
int.SE=summary(fit1)$tTable[4,2])
}
}
return(res)
})
pval = do.call(rbind,gls.res)
int.qval = get.qval(pval$LR.pval)
dummy0.qval = get.qval(pval$dummy0)
dummy1.qval = get.qval(pval$dummy1)
#   buff.qval = get.qval(pval$buff)
#   return(data.frame(ENSGID=fNames,int.pval=pval$LR.pval,int.qval=int.qval,
#                     dummy0.qval=dummy0.qval,dummy1.qval=dummy1.qval,
#                     buff.pval=pval$buff,buff.qval=buff.qval))
return(data.frame(ENSGID=fNames,int.pval=pval$LR.pval,int.qval=int.qval,
dummy0.qval=dummy0.qval,dummy1.qval=dummy1.qval,
dummy0.pval=pval$dummy0,dummy1.pval=pval$dummy1,
int.SE=pval$int.SE))
}
res.riborna3 <- interact2way_full_buffer(
eSetRRP.RP.Q.log2[ , eSetRRP.RP.Q.log2$species != "rhesus" &
eSetRRP.RP.Q.log2$seqData != "protein"])
interact2way_full_buffer <- function(eSet) {
# eSet = eSetRRP.log2.Qmed[,eSetRRP.log2.Qmed$species!="rhesus" & eSetRRP.log2.Qmed$seqData!="ribo"]
#  source(file.path(codedir,"DEtesting.r"))
fNames = featureNames(eSet)
require(nlme)
#  require(parallel)
require(contrast)
#   gls.res = lapply(1:10, function(i) {
gls.res = lapply(1:length(fNames), function(i) {
mat1 = eSet[featureNames(eSet)==fNames[i],]
mat1aov.temp = data.frame(cov=c(t(exprs(mat1))),seqData=mat1$seqData,
species=mat1$species,celline=mat1$celline,
dummy.var=as.integer(mat1$seqData==head(rev(unique(mat1$seqData)),1)))
mat1aov.temp$dummy.var = as.factor(mat1aov.temp$dummy.var)
mat1aov.temp$species = as.factor(mat1aov.temp$species)
tmp0 = tryCatch(fit0 <- gls(cov~species+dummy.var,
weights=varIdent(form=~1|dummy.var),data=mat1aov.temp,
na.action=na.omit),
error = function(c) list("error", conditionMessage(c)) )
if (length(tmp0)==2) {
res <- data.frame(LR.pval=NA,coef.pval=NA,dummy1=NA,dummy0=NA)
} else {
fit1 = tryCatch(foo <- gls(cov~species*dummy.var,
weights=varIdent(form=~1|dummy.var),data=mat1aov.temp,na.action=na.omit),
error = function(c) list("error", conditionMessage(c)))
if (length(fit1)==2) {
res = data.frame(LR.pval=NA,coef.pval=NA,dummy1=NA,dummy0=NA)
} else {
aov <- anova(tmp0,fit1)
res <- data.frame(LR.pval = aov[2,"p-value"],
coef.pval = summary(fit1)$tTable[4,4])
fit <- gls(cov~species*dummy.var-1,
weights=varIdent(form=~1|dummy.var),
data=mat1aov.temp,na.action=na.omit)
contrast.res1 <- contrast(fit,a=list(dummy.var="1",species="human"),
b=list(dummy.var="1",species="chimp"))
contrast.res0 <- contrast(fit,a=list(dummy.var="0",species="human"),
b=list(dummy.var="0",species="chimp"))
# dummy.var = 0 for protein and dummy.var = 1 for ribo
# b1,b2,b3,b4 below correspond to the coef. in the model matrix of fit
# pro_chimp (b3-b4) + ribo_human (b2-b4)- pro_human (b3-(b3-b4)) - ribo_chimp (b1-(b3-b4))= 0
# equivalent to: -b1+b2+2b3-4b4=0
#           contrast.buff=anova(fit,L=c(-1,1,2,-4))
#           buff.dir = mean(mat1aov.temp$cov[6:10],na.rm=TRUE)-mean(mat1aov.temp$cov[1:5],
#                   na.rm=TRUE)-(mean(mat1aov.temp$cov[16:20],na.rm=TRUE)-mean(mat1aov.temp$cov[11:15],na.rm=TRUE))
#           if (buff.dir > 0) {  buff.pval= contrast.buff$p/2 }
#           if (buff.dir < 0) {  buff.pval= 1-contrast.buff$p/2 }
#           res = data.frame(res,dummy1=contrast.res1$Pvalue,
#                            dummy0=contrast.res0$Pvalue,
#                            buff=buff.pval)
res = data.frame(res,dummy1=contrast.res1$Pvalue,
dummy0=contrast.res0$Pvalue,
int.SE=summary(fit1)$tTable[4,2])
}
}
return(res)
})
pval = do.call(rbind,gls.res)
int.qval = get_qval(pval$LR.pval)
dummy0.qval = get.qval(pval$dummy0)
dummy1.qval = get.qval(pval$dummy1)
#   buff.qval = get.qval(pval$buff)
#   return(data.frame(ENSGID=fNames,int.pval=pval$LR.pval,int.qval=int.qval,
#                     dummy0.qval=dummy0.qval,dummy1.qval=dummy1.qval,
#                     buff.pval=pval$buff,buff.qval=buff.qval))
return(data.frame(ENSGID=fNames,int.pval=pval$LR.pval,int.qval=int.qval,
dummy0.qval=dummy0.qval,dummy1.qval=dummy1.qval,
dummy0.pval=pval$dummy0,dummy1.pval=pval$dummy1,
int.SE=pval$int.SE))
}
res.riborna3 <- interact2way_full_buffer(
eSetRRP.RP.Q.log2[ , eSetRRP.RP.Q.log2$species != "rhesus" &
eSetRRP.RP.Q.log2$seqData != "protein"])
interact2way_full_buffer <- function(eSet) {
# eSet = eSetRRP.log2.Qmed[,eSetRRP.log2.Qmed$species!="rhesus" & eSetRRP.log2.Qmed$seqData!="ribo"]
#  source(file.path(codedir,"DEtesting.r"))
fNames = featureNames(eSet)
require(nlme)
#  require(parallel)
require(contrast)
#   gls.res = lapply(1:10, function(i) {
gls.res = lapply(1:length(fNames), function(i) {
mat1 = eSet[featureNames(eSet)==fNames[i],]
mat1aov.temp = data.frame(cov=c(t(exprs(mat1))),seqData=mat1$seqData,
species=mat1$species,celline=mat1$celline,
dummy.var=as.integer(mat1$seqData==head(rev(unique(mat1$seqData)),1)))
mat1aov.temp$dummy.var = as.factor(mat1aov.temp$dummy.var)
mat1aov.temp$species = as.factor(mat1aov.temp$species)
tmp0 = tryCatch(fit0 <- gls(cov~species+dummy.var,
weights=varIdent(form=~1|dummy.var),data=mat1aov.temp,
na.action=na.omit),
error = function(c) list("error", conditionMessage(c)) )
if (length(tmp0)==2) {
res <- data.frame(LR.pval=NA,coef.pval=NA,dummy1=NA,dummy0=NA)
} else {
fit1 = tryCatch(foo <- gls(cov~species*dummy.var,
weights=varIdent(form=~1|dummy.var),data=mat1aov.temp,na.action=na.omit),
error = function(c) list("error", conditionMessage(c)))
if (length(fit1)==2) {
res = data.frame(LR.pval=NA,coef.pval=NA,dummy1=NA,dummy0=NA)
} else {
aov <- anova(tmp0,fit1)
res <- data.frame(LR.pval = aov[2,"p-value"],
coef.pval = summary(fit1)$tTable[4,4])
fit <- gls(cov~species*dummy.var-1,
weights=varIdent(form=~1|dummy.var),
data=mat1aov.temp,na.action=na.omit)
contrast.res1 <- contrast(fit,a=list(dummy.var="1",species="human"),
b=list(dummy.var="1",species="chimp"))
contrast.res0 <- contrast(fit,a=list(dummy.var="0",species="human"),
b=list(dummy.var="0",species="chimp"))
# dummy.var = 0 for protein and dummy.var = 1 for ribo
# b1,b2,b3,b4 below correspond to the coef. in the model matrix of fit
# pro_chimp (b3-b4) + ribo_human (b2-b4)- pro_human (b3-(b3-b4)) - ribo_chimp (b1-(b3-b4))= 0
# equivalent to: -b1+b2+2b3-4b4=0
#           contrast.buff=anova(fit,L=c(-1,1,2,-4))
#           buff.dir = mean(mat1aov.temp$cov[6:10],na.rm=TRUE)-mean(mat1aov.temp$cov[1:5],
#                   na.rm=TRUE)-(mean(mat1aov.temp$cov[16:20],na.rm=TRUE)-mean(mat1aov.temp$cov[11:15],na.rm=TRUE))
#           if (buff.dir > 0) {  buff.pval= contrast.buff$p/2 }
#           if (buff.dir < 0) {  buff.pval= 1-contrast.buff$p/2 }
#           res = data.frame(res,dummy1=contrast.res1$Pvalue,
#                            dummy0=contrast.res0$Pvalue,
#                            buff=buff.pval)
res = data.frame(res,dummy1=contrast.res1$Pvalue,
dummy0=contrast.res0$Pvalue,
int.SE=summary(fit1)$tTable[4,2])
}
}
return(res)
})
pval = do.call(rbind,gls.res)
int.qval = get_qval(pval$LR.pval)
dummy0.qval = get_qval(pval$dummy0)
dummy1.qval = get_qval(pval$dummy1)
#   buff.qval = get.qval(pval$buff)
#   return(data.frame(ENSGID=fNames,int.pval=pval$LR.pval,int.qval=int.qval,
#                     dummy0.qval=dummy0.qval,dummy1.qval=dummy1.qval,
#                     buff.pval=pval$buff,buff.qval=buff.qval))
return(data.frame(ENSGID=fNames,int.pval=pval$LR.pval,int.qval=int.qval,
dummy0.qval=dummy0.qval,dummy1.qval=dummy1.qval,
dummy0.pval=pval$dummy0,dummy1.pval=pval$dummy1,
int.SE=pval$int.SE))
}
res.riborna3 <- interact2way_full_buffer(
eSetRRP.RP.Q.log2[ , eSetRRP.RP.Q.log2$species != "rhesus" &
eSetRRP.RP.Q.log2$seqData != "protein"])
plot(res.riborna3$int.pval, res.riborna2$int.pval)
plot(res.riborna3$int.qval, res.riborna2$int.qval)
plot(res.riborna$int.qval, res.riborna2$int.qval)
sum(res.riborna3$int.qval < .01)
sum(res.riborna$int.qval < .01)
sum(res.riborna2$int.qval < .01)
## load LRT results of RNA vs. Protein divergence
load(file.path(rdadir,"rnapro.rda"))
head(rnapro)
head(res.rnapro)
sum(res.rnapro$int.qval<.01)
a < qvalue(res.rnapro$int.pval)$qvalue
a <- qvalue(res.rnapro$int.pval)$qvalue
sum(a < .01)
sum(res.rnapro$int.qval < .01)
?qvalue
load(file=file.path(rdadir,"eSetRiboProfile.rda"))
head(ribo.Res.hc)
sum(ribo.Res.hc$qval < .01)
sum(ribo.Res.hc$qval)
sum(ribo.Res.hc$qval < .01)
a <- qvalue(ribo.Res.hc$pval)$qvalue
sum(a < .01)
str(ribo.Res.hc)
summary(ribo.Res.hc)
?qvalue
sum(ribo.Res.hr$qval < .01)
sum(qvalue(ribo.Res.hr)$qvalue < .01)
sum(qvalue(ribo.Res.hr$pval)$qvalue < .01)
sum(qvalue(ribo.Res.hr$pval)$qvalues < .01)
all.equal(riboRes.hc$pval, qvalue(ribo.Res.hc$pval)$pvalues)
all.equal(ribo.Res.hc$pval, qvalue(ribo.Res.hc$pval)$pvalues)
sessionInfo()
?qvalue
qvalue
a <- qvalue(ribo.Res.hc$pval, pfdr = TRUE)$qvalues
sum(a < .01)
sum(ribo.Res.hc$qval < .01)
a <- qvalue(ribo.Res.hc$pval, pfdr = FALSE)$qvalues
sum(a < .01)
a <- qvalue(ribo.Res.hc$pval, fdr.level = .01)$qvalues
sum(a < .01)
install_github("jdstorey/qvalue")
uninstall.packages("qvalue")
remove.packages("qvalue")
install_github("jdstorey/qvalue")
require(qvalue)
library(qvalue)
require(fdrtools)
biocLite(fdrtools)
biocLite('fdrtools')
biocLite('fdrtool')
require(fdrtool)
b <- fdrtool(ribo.Res.hc$pval, statistic = "pvalue")
?fdrtool
b <- fdrtool(ribo.Res.hc$pval, statistic = "pvalue", plot = FALSE)
str(b)
sum(b$qval)
sum(b$qval < .01)
a <- qvalue(ribo.Res.hc$pval, fdr.level = .01)$qvalues
sum(a < .01)
sum(ribo.Res.hc$qval < .01)
b <- fdrtool(ribo.Res.hc$pval, statistic = "pvalue", plot = FALSE)
sum(b$qval < .01)
d <- fdrtool(riborna$int.pval, statistic = "pvalue", plot = FALSE)
d <- fdrtool(res.riborna$int.pval, statistic = "pvalue", plot = FALSE)
sum(d$qval <.01)
install.packages("/Users/joycehsiao/Downloads/qvalue_1.38.0.tgz",
repos = NULL, type="source")
remove.pacakges("qvalue")
remove.packges("qvalue")
remove.packages("qvalue")
install.packages("/Users/joycehsiao/Downloads/qvalue_1.38.0.tgz",
repos = NULL, type="source")
require(qvalue)
remove.packages("qvalue")
install.packages("/Users/joycehsiao/Downloads/qvalue_1.38.0.tgz",
repos = NULL, type="source")
require(qvalue)
remove.packages("qvalue")
install.packages("/Users/joycehsiao/Downloads/qvalue_1.38.0.tar.gz",
repos = NULL, type="source")
remove.packages("qvalue")
install.packages("/Users/joycehsiao/Downloads/qvalue_1.38.0.tar.gz",
repos = NULL, type="source")
getwd()
load("../rdas/TEnew.rda")
require(qvalue)
biocLite("qvalue")
require(BiocInstaller)
biocLite("qvalue")
a <- qvalue(res.riborna$int.pval)
require(qvalue)
a <- qvalue(res.riborna$int.pval)
sum(a$int.qval < .01)
sum(a$qvalue < .01)
str(Ra)
str(a)
a$lambda
lfdr.pval = function(p, trunc=TRUE, monotone=TRUE, transf=c("probit", "logit"), adj=1.5, eps=10^-8, ...) {
require(qvalue)
pi0 = qvalue(p, ...)$pi0
n = length(p)
transf = match.arg(transf)
if(transf=="probit") {
p = pmax(p, eps)
p = pmin(p, 1-eps)
x = qnorm(p)
myd = density(x, adjust=adj)
mys = smooth.spline(x=myd$x, y=myd$y)
y = predict(mys, x)$y
lfdr = pi0*dnorm(x)/(y)
}
if(transf=="logit") {
x = log((p+eps)/(1-p+eps))
myd = density(x, adjust=adj)
mys = smooth.spline(x=myd$x, y=myd$y)
y = predict(mys, x)$y
dx = exp(x)/(1+exp(x))^2
lfdr = pi0*dx/y
}
if(trunc) {lfdr[lfdr > 1] = 1}
if(monotone) {
lfdr = lfdr[order(p)]
for(i in 2:n) {
if(lfdr[i] < lfdr[i-1]) {lfdr[i] = lfdr[i-1]}
}
lfdr = lfdr[rank(p)]
}
return(lfdr)
}
lfdr(res.riborna$int.pval)
l <- lfdr(res.riborna$int.pval)
hist(l)
sum(l < .01)
