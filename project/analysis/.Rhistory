<<<<<<< HEAD
eset_per_permute <- ExpressionSet(assayData = as.matrix(emat_per_permute))
phenoData(eset_per_permute) <- phenoData(eset_sub)
featureData(eset_per_permute) <- featureData(eset_sub)
return(interact2way(eset_per_permute))
}
pheno_labels <- unique(pData(eset_sub))
null_interact <- foreach(each_null = 1:n_permute) %dopar% {
n_samples_per_genes <- dim(pData(eset_sub))[1]
emat_1 <- emat[, pData(eset_sub)$seqData == pheno_labels[1]]
emat_2 <- emat[, pData(eset_sub)$seqData == pheno_lables[2]]
emat_per_permute <- t( sapply(1:n_genes, function(i) {
sample_labels_1 <- sample(1: (n_samples_per_genes/2) )
=======
>>>>>>> master
sample_labels_2 <- sample(1: (n_samples_per_genes/2) )
cbind(emat_1[i,sample_labels_1], emat_2[i,sample_labels_2])
} ) )
dimnames(emat_per_permute)[2] <- NULL
eset_per_permute <- ExpressionSet(assayData = as.matrix(emat_per_permute))
phenoData(eset_per_permute) <- phenoData(eset_sub)
featureData(eset_per_permute) <- featureData(eset_sub)
return(interact2way(eset_per_permute))
}
<<<<<<< HEAD
pheno_labels <- unique(pData(eset_sub))
pheno_labels <- unique(pData(eset_sub))
null_interact <- foreach(each_null = 1:n_permute) %dopar% {
n_samples_per_genes <- dim(pData(eset_sub))[1]
emat_1 <- emat[, pData(eset_sub)$seqData == pheno_labels[1]]
emat_2 <- emat[, pData(eset_sub)$seqData == pheno_labels[2]]
emat_per_permute <- t( sapply(1:n_genes, function(i) {
sample_labels_1 <- sample(1: (n_samples_per_genes/2) )
sample_labels_2 <- sample(1: (n_samples_per_genes/2) )
cbind(emat_1[i,sample_labels_1], emat_2[i,sample_labels_2])
} ) )
dimnames(emat_per_permute)[2] <- NULL
eset_per_permute <- ExpressionSet(assayData = as.matrix(emat_per_permute))
phenoData(eset_per_permute) <- phenoData(eset_sub)
featureData(eset_per_permute) <- featureData(eset_sub)
return(interact2way(eset_per_permute))
}
pheno_labels[1]
pheno_labels
pheno_labels <- unique(pData(eset_sub)$seqData)
pheno_labels
null_interact <- foreach(each_null = 1:n_permute) %dopar% {
n_samples_per_genes <- dim(pData(eset_sub))[1]
emat_1 <- emat[, pData(eset_sub)$seqData == pheno_labels[1]]
emat_2 <- emat[, pData(eset_sub)$seqData == pheno_labels[2]]
emat_per_permute <- t( sapply(1:n_genes, function(i) {
sample_labels_1 <- sample(1: (n_samples_per_genes/2) )
sample_labels_2 <- sample(1: (n_samples_per_genes/2) )
cbind(emat_1[i,sample_labels_1], emat_2[i,sample_labels_2])
} ) )
dimnames(emat_per_permute)[2] <- NULL
eset_per_permute <- ExpressionSet(assayData = as.matrix(emat_per_permute))
phenoData(eset_per_permute) <- phenoData(eset_sub)
featureData(eset_per_permute) <- featureData(eset_sub)
return(interact2way(eset_per_permute))
}
require(Humanzee)
pheno_labels <- unique(pData(eset_sub)$seqData)
null_interact <- foreach(each_null = 1:n_permute) %dopar% {
n_samples_per_genes <- dim(pData(eset_sub))[1]
emat_1 <- emat[, pData(eset_sub)$seqData == pheno_labels[1]]
emat_2 <- emat[, pData(eset_sub)$seqData == pheno_labels[2]]
emat_per_permute <- t( sapply(1:n_genes, function(i) {
sample_labels_1 <- sample(1: (n_samples_per_genes/2) )
sample_labels_2 <- sample(1: (n_samples_per_genes/2) )
cbind(emat_1[i,sample_labels_1], emat_2[i,sample_labels_2])
} ) )
dimnames(emat_per_permute)[2] <- NULL
eset_per_permute <- ExpressionSet(assayData = as.matrix(emat_per_permute))
phenoData(eset_per_permute) <- phenoData(eset_sub)
featureData(eset_per_permute) <- featureData(eset_sub)
return(interact2way(eset_per_permute))
}
str(null_interact)
## set working directories
dir = "/Users/joycehsiao/Dropbox/Brett"
rdadir <- file.path(dir, "rdas")
load(file.path(dir,"melted.RData"))
## Create a unique identifier for biological replicates
melted$biorep <- as.factor(paste(melted$individual,melted$biorep,sep="_"))
library(nlme)
library(lme4)
library(varComp)
library(blme)
library(scales)
glmer_varcomp <- lapply( levels(melted$Var1), function(id) {
test <- melted[melted$Var1 %in% id,]
test1 <- test[,3:6]
test1$biorep <- as.factor(test1$biorep)
fit <- lme4::glmer(value ~ 1 + (1|individual) + (1|individual:biorep),
family = gaussion, data = test1, na.action = na.exclude)
var_foo <- as.data.frame(VarCorr(fit) )
var_foo$vcov
})
glmer_varcomp <- lapply( levels(melted$Var1), function(id) {
test <- melted[melted$Var1 %in% id,]
test1 <- test[,3:6]
test1$biorep <- as.factor(test1$biorep)
fit <- lme4::glmer(value ~ 1 + (1|individual) + (1|individual:biorep),
family = "gaussion", data = test1, na.action = na.exclude)
var_foo <- as.data.frame(VarCorr(fit) )
var_foo$vcov
})
glmer_varcomp <- lapply( levels(melted$Var1), function(id) {
test <- melted[melted$Var1 %in% id,]
test1 <- test[,3:6]
test1$biorep <- as.factor(test1$biorep)
fit <- lme4::glmer(value ~ 1 + (1|individual) + (1|individual:biorep),
family = "gaussian", data = test1, na.action = na.exclude)
var_foo <- as.data.frame(VarCorr(fit) )
var_foo$vcov
})
glmer_varcomp <- do.call(rbind, glmer_varcomp)
rownames(glmer_varcomp) <- levels(melted$Var1)
colnames(glmer_varcomp) <- c("individual","biorep","residual")
load(file.path(rdadir, "varcomp_methods.rda"))
source('~/.active-rstudio-document', echo=TRUE)
save(nlme_varcomp, lme4_varcomp, anova_varcomp, varComp_varcomp,
glmer_varcomp,
blme_varcomp, MSE_varcomp,
file = file.path(rdadir, "varcomp_methods.rda"))
MSE_varcomp <- lapply( levels(melted$Var1), function(id) {
test <- melted[melted$Var1 %in% id, ]
test1 <- test[,3:6]
test1$techrep <- as.factor(unlist(test1$techrep))
grand_mean <- mean(test1$value, na.rm = TRUE)
n_ind <- 3
n_bio <- 2
n_tech <- 2
MS_individual <- sum( by(test1, test1$individual, function(x) {
(mean(x$value) - grand_mean)^2
}) )/(n_ind - 1)
MS_biorep <- sum( by(test1, test1$individual,
function(ind_level) {
bio_means <- by(ind_level,
ind_level$biorep,
function(bio_level) mean(bio_level$value) )
sum ( (bio_means - mean(ind_level$value))^2 )
}) ) / ( n_ind * (n_bio - 1) )
MS_techrep <- sum( by(test1, list(test1$individual, test1$biorep),
function(tech_level) {
sum( (tech_level$value - mean(tech_level$value))^2 )
}) ) / (n_ind * n_bio *(n_tech - 1))
MS_individual_unique <- (c(MS_individual) - c(MS_biorep))/(n_bio*n_tech)
MS_biorep_unique <- (c(MS_biorep) - c(MS_techrep))/(n_tech)
data.frame(MS_individual = MS_individual_unique,
MS_biorep = MS_biorep_unique, MS_techrep = c(MS_techrep) )
})
MSE_varcomp <- as.data.frame(do.call(rbind, MSE_varcomp))
## nlme versus lme4
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = round(nlme_varcomp[,i],4), y= glmer_varcomp[,i],
axes = F, xlab = "nlme estimate", ylab = "lme4 glmer estimate",
pch = 16, col = alpha("black",.7), cex = .7)
title(main = labels[i], line = -1)
axis(1); axis(2)
}
title(main = "Variance component estimates",
outer = TRUE, line = -1)
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = rank(round(nlme_varcomp[,i],4)), y = rank(glmer_varcomp[,i]),
axes = F, xlab = "nlme estimate", ylab = "lme4 glmer estimate",
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
title(main = labels[i], line = -1)
}
title(main = "Ranked-ordered variance component estimates",
outer = TRUE, line = -1)
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = round(lme4_varcomp[,i],4), y= glmer_varcomp[,i],
axes = F, xlab = "lme4 estimate", ylab = "glmer estimate",
pch = 16, col = alpha("black",.7), cex = .7)
title(main = labels[i], line = -1)
axis(1); axis(2)
}
title(main = "Variance component estimates",
outer = TRUE, line = -1)
par(mfrow = c(2,2))
#ii_low <- log10(nlme_varcomp[,1]) < -7 & log10(nlme_varcomp[,2]) < -7
plot(x = log10(MSE_varcomp$MS_individual),
y = log10(MSE_varcomp$MS_techrep), xlim = c(-6, 0.5), ylim = c(-6, 0.5),
pch = 16, col="gray40", cex = .7,
xlab = "log10 MSE of individual layer",
ylab = "log10 MSE of residuals")
abline(0, 1, col = "red")
par(mfrow = c(2,2))
#ii_low <- log10(nlme_varcomp[,1]) < -7 & log10(nlme_varcomp[,2]) < -7
plot(x = log10(MSE_varcomp$MS_individual),
y = log10(MSE_varcomp$MS_techrep), xlim = c(-6, 0.5), ylim = c(-6, 0.5),
pch = 16, col="gray40", cex = .7,
xlab = "log10 MSE of individual layer",
ylab = "log10 MSE of residuals")
abline(0, 1, col = "red")
summary(MSE_varcomp$MS_individual)
summary(MSE_varcomp)
par(mfrow = c(2,2))
plot(x = MSE_varcomp$MS_individual,
y = MSE_varcomp$MS_techrep, xlim = c(-2.2, 3), ylim = c(-2.2, 3),
pch = 16, col="gray40", cex = .7,
xlab = "MSE unique of individual layer",
ylab = "MSE unique of residuals")
abline(0, 1, col = "red")
par(mfrow = c(2,2))
plot(x = MSE_varcomp$MS_individual,
y = MSE_varcomp$MS_techrep, xlim = c(-.2, 3), ylim = c(-.2, 3),
pch = 16, col="gray40", cex = .7,
xlab = "MSE unique of individual layer",
ylab = "MSE unique of residuals")
abline(0, 1, col = "red")
plot(x = MSE_varcomp$MS_individual,
y = MSE_varcomp$MS_biorep, xlim = c(-.2, 3), ylim = c(-.2, 3),
pch = 16, col="gray40", cex = .7,
xlab = "MSE unique of individual layer",
ylab = "MSE unique of biological layer")
abline(0, 1, col = "red")
par(mfrow = c(2,2))
plot(x = MSE_varcomp$MS_individual,
y = MSE_varcomp$MS_techrep,
pch = 16, col="gray40", cex = .7,
xlab = "MSE unique of individual layer",
ylab = "MSE unique of residuals")
abline(0, 1, col = "red")
plot(x = MSE_varcomp$MS_individual,
y = MSE_varcomp$MS_biorep,
pch = 16, col="gray40", cex = .7,
xlab = "MSE unique of individual layer",
ylab = "MSE unique of biological layer")
abline(0, 1, col = "red")
plot(x = MSE_varcomp$MS_biorep,
y = MSE_varcomp$MS_techrep,
pch = 16, col="gray40", cex = .7,
xlab = "MSE unique of biological layer",
ylab = "MSE unique of residuals")
abline(0, 1, col = "red")
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = anova_varcomp[,i], y = anova_varcomp[,i],
axes = F, xlab = "ANOVA estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
}
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = anova_varcomp[,i], y = MSE_varcomp[,i],
axes = F, xlab = "ANOVA estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
}
abline(0, 1, col = "red")
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = anova_varcomp[,i], y = MSE_varcomp[,i],
axes = F, xlab = "ANOVA estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
}
abline(0, 1, col = "red")
title(main = "ANOVA vs. empirical variance component estimates", outer = TRUE)
## nlme versus blme
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = anova_varcomp[,i], y = MSE_varcomp[,i],
axes = F, xlab = "ANOVA estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
abline(0, 1, col = "red")
}
title(main = "ANOVA vs. empirical variance component estimates", outer = TRUE)
id <- levels(melted$Var1)[1]
test <- melted[melted$Var1 %in% id,]
test1 <- test[,3:6]
test1$techrep <- as.factor(unlist(test1$techrep))
fit_try <- tryCatch( MCMCglmm(value ~ 1,
random = ~ indivdiual + individual:biorep,
data = test1, verbose = FALSE),
condition = function(c) c)
fit_try
require(MCMCglmm)
fit_try <- tryCatch( MCMCglmm(value ~ 1,
random = ~ indivdiual + individual:biorep,
data = test1, verbose = FALSE),
condition = function(c) c)
fit_try
fit_try <- tryCatch( MCMCglmm(value ~ 1,
random = ~ individiual + individual:biorep,
data = test1, verbose = FALSE),
condition = function(c) c)
fit_try
fit_try <- tryCatch( MCMCglmm(value ~ 1,
random = ~ individual + individual:biorep,
data = test1, verbose = FALSE),
condition = function(c) c)
fit_try
fit_try_2 <- tryCatch( fit <- blmer(value ~ 1|individual/biorep,
data = test1, cov.prior = wishart,
resid.prior = invgamma),
condition = function(c) c)
summary(fit_try)
summary(fit_try)2
summary(fit_try_2)
fit_try <- tryCatch( MCMCglmm(value ~ 1,
random = ~ individual:biorep,
data = test1, verbose = FALSE),
condition = function(c) c)
summary(fit_try)
mcmc_varest <- posterior.mode(fit_try$VCV)
mcmc_varest
fit_try <- tryCatch( MCMCglmm(value ~ 1,
random = ~ individual + individual:biorep,
data = test1, verbose = FALSE),
condition = function(c) c)
mcmc_varest <- posterior.mode(fit_try$VCV)
summary(fit_try)
str(summary(fit_try))
str(summary(fit_try))$G
str(summary(fit_try))$Gcovariances
summary(fit_try)$Gcovariances
summary(fit_try)
str(summary(fit_try))
summary(fit_try)$Rcovariances
summary(fit_try)$Gcovariances[,1]
mcmc_varest <- c(summary(fit_try)$Gcovariances[,1],
summary(fit_try)$Rcovariances[,1])
mcmc_varest
mcmc_varest <- c(c(summary(fit_try)$Gcovariances[,1],
summary(fit_try)$Rcovariances[,1]) )
mcmc_varest
mcmc_varcomp <- lapply( levels(melted$Var1), function(id) {
test <- melted[melted$Var1 %in% id,]
test1 <- test[,3:6]
test1$techrep <- as.factor(unlist(test1$techrep))
fit_try <- tryCatch( MCMCglmm(value ~ 1,
random = ~ individual + individual:biorep,
data = test1, verbose = FALSE),
condition = function(c) c)
mcmc_varest <- c(c(summary(fit_try)$Gcovariances[,1],
summary(fit_try)$Rcovariances[,1]) )
if(inherits(fit_try, "condition")){
var_foo <- rep(NA, 3)
return(var_foo)
}
if(!inherits(fit_try, "condition")){
var_foo <- mcmc_varest
var_foo
}
})
mcmc_varcomp <- do.call(rbind, mcmc_varcomp)
rownames(mcmc_varcomp) <- levels(melted$Var1)
colnames(mcmc_varcomp) <- c("individual","biorep","residual")
summary(mcmc_varcomp)
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = log10(mcmc_varcomp[,i]), y = log10(blme_varcomp[,i]),
axes = F, xlab = "log10 MCMCglmm estimate", ylab = "log10 blme estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
}
title(main = "MCMCglmm vs. blme variance component estimates", outer = TRUE)
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = log10(mcmc_varcomp[,i]), y = log10(blme_varcomp[,i]),
axes = F, xlab = "log10 MCMCglmm estimate", ylab = "log10 blme estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
abline(0, 1, col = "red")
}
title(main = "MCMCglmm vs. blme variance component estimates", outer = TRUE)
summary(mcmc_varcomp)
summary(log10(mcmc_varcomp))
par(mfrow = c(2,2))
plot(x = log10(mcmc_varcomp[,1]), y = log10(mcmc_varcomp[,3]),
xlab = "log10 individual variance",
ylab = "log10 technical variance",
xlim = c(-5,3), ylim = c(-5,3))
abline(0,1, col = "red")
plot(x = log10(mcmc_varcomp[,1]), y = log10(mcmc_varcomp[,2]),
xlab = "log10 individual variance",
ylab = "log10 biological variance",
xlim = c(-5,3), ylim = c(-5,3))
abline(0,1, col = "red")
plot(x = log10(mcmc_varcomp[,2]), y = log10(mcmc_varcomp[,3]),
xlab = "log10 biological variance",
ylab = "log10 technical variance",
xlim = c(-5,3), ylim = c(-5,3))
abline(0,1, col = "red")
par(mfrow = c(2, 2))
boxplot(log10(nlme_varcomp),
ylab = "log10 variance component estimates",
main = "nlme")
boxplot(log10(blme_varcomp),
ylab = "log10 variance component estimates",
main = "blme")
boxplot(log10(mcmc_varcomp),
ylab = "log10 variance component estimates",
main = "MCMC")
ii_low <- log10(nlme_varcomp[,1]) < -7 & log10(nlme_varcomp[,2]) < -7
par(mfrow = c(2, 2))
boxplot(log10(nlme_varcomp[ii_low,]),
ylab = "log10 variance component estimates",
main = "nlme")
boxplot(log10(blme_varcomp[ii_low,]),
ylab = "log10 variance component estimates",
main = "blme")
boxplot(log10(mcmc_varcomp[ii_low,]),
ylab = "log10 variance component estimates",
main = "MCMCglmm")
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = mcmc_varcomp[,i], y = MSE_varcomp[,i],
axes = F, xlab = "MCMC estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
abline(0, 1, col = "red")
}
title(main = "MCMCglmm vs. empirical variance component estimates", outer = TRUE)
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = mcmc_varcomp[,i], y = log10(MSE_varcomp[,i]),
axes = F, xlab = "log10 MCMC estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
abline(0, 1, col = "red")
}
title(main = "MCMCglmm vs. empirical variance component estimates", outer = TRUE)
## nlme versus blme
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = log10(mcmc_varcomp)[,i], y = MSE_varcomp[,i],
axes = F, xlab = "log10 MCMC estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
abline(0, 1, col = "red")
}
title(main = "MCMCglmm vs. empirical variance component estimates", outer = TRUE)
## nlme versus blme
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = log10(mcmc_varcomp)[,i], y = MSE_varcomp[,i],
axes = F, xlab = "log10 MCMC estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
}
title(main = "MCMCglmm vs. empirical variance component estimates", outer = TRUE)
log10(1)
log10(1.)
log10(1.2)
log10(.5)
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = log10(mcmc_varcomp)[,i], y = MSE_varcomp[,i],
axes = F, xlab = "log10 MCMC estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
abline(v = 1, col = "red")
}
title(main = "MCMCglmm vs. empirical variance component estimates", outer = TRUE)
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = log10(mcmc_varcomp)[,i], y = MSE_varcomp[,i],
axes = F, xlab = "log10 MCMC estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
abline(v = 1, h = 0, col = "red")
}
title(main = "MCMCglmm vs. empirical variance component estimates", outer = TRUE)
par(mfrow = c(2,2))
labels <- c("individual", "biological replicate", "technical replicate")
for (i in 1:3) {
plot(x = log10(mcmc_varcomp)[,i], y = MSE_varcomp[,i],
axes = F, xlab = "log10 MCMC estimate", ylab = "Empirical estimate",
main = labels[i],
pch = 16, col = alpha("black",.7), cex = .7)
axis(1); axis(2)
abline(v = 0, h = 0, col = "red")
}
title(main = "MCMCglmm vs. empirical variance component estimates", outer = TRUE)
ls()
save(nlme_varcomp, lme4_varcomp, anova_varcomp, varComp_varcomp,
glmer_varcomp, mcmc_varcomp,
blme_varcomp, MSE_varcomp,
file = file.path(rdadir, "varcomp_methods.rda"))
=======
str(null_interact)
library(Biobase)
## Set working directories
dir <- "../"
figdir <- file.path(dir,"figures")
rdadir <- file.path(dir,"rdas")
datadir <- file.path(dir, "data")
## Use broman package for colors
require(broman)
crayon <- brocolors("crayons")
## Load customized packages
require(devtools)
require(Humanzee)
dir
permute_dir <- "~/Dropbox/Github/primate_ribo_rda_permute/"
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-pro-seqData.rda"))
permute_dir <- "~/Dropbox/Github/primate_ribo_rdas_permute/"
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-pro-seqData.rda"))
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-rna-seqData.rda"))
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-rna-pro-seqData.rda"))
ls()
length(res_null_ribo_pro_seqData)
head(res_null_ribo_pro_seqData[[1]])
hist(res_null_ribo_pro_seqData[[1]]$int.pval)
require(Humanzee)
interact2way_full_buffer()
interact2way_full_buffer
interact2way
load(file.path(rdadir, "eSetRRP.rda"))
ls()
eSet <- eSetRRP.RP.Q.log2[,eSetRRP.RP.Q.log2$seqData!="protein" & eSetRRP.RP.Q.log2$species!="rhesus"]
fNames <- featureNames(eSet)
require(nlme)
i=1
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
aov <- anova(fit_null_try, fit_interact_try)
aov
aov[2,"L.Ratio"]
gls.res <- lapply(1:10, function(i) {
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LR.pval = aov[2, c("L.Ratio", "p-value")] )
}
return(res)
}
})
LR_res <- do.call(rbind, gls.res)
str(LR_res)
head(LR_res)
res
gls.res <- lapply(1:10, function(i) {
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
}
return(res)
}
})
LR_res <- do.call(rbind, gls.res)
LR_res
head(LR_res)
int.qval <- get_qval(LR_res$LR_pval)
LR_res$LR_pval
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-rna-seqData.rda"))
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-pro-seqData.rda"))
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-rna-pro-seqData.rda"))
ls()
head(res_null_ribo_rna_seqData)
head(res_null_ribo_rna_seqData)[[1]]
head(res_null_ribo_rna_seqData[[1]])
ls()
eSet <- eSetRRP.RP.Q.log2[ ,eSetRRP.RP.Q.log2$seqData!="protein" &
eSetRRP.RP.Q.log2$species!="rhesus"]
fNames <- featureNames(eSet)
require(nlme)
i
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
}
return(res)
}
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
}
return(res)
}
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
}
return(res)
}
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
res <- data.frame(LRatio = NA, LR_pval = NA)
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
res
fit_interact_try
summary(fit_interact_try)
coef(fit_interact_try)
summary(coef(fit_interact_try))
str(summary(fit_interact_try))
summary(fit_interact_try)$tTable
str(summary(fit_interact_try)$tTable)
tt=(summary(fit_interact_try)$tTable
)
tt
tt[2,]
rownames(tt)[2]
paste(rownames(tt)[2],colnames(tt),sep=.)
paste(rownames(tt)[2],colnames(tt),sep=".")
paste(rownames(tt)[2],colnames(tt),sep="_")
coef_table <- summary(fit_interact_try)$tTable
coef_res <- c(coef_table[2, ], coef_table[3, ], coef_table[4, ])
names(coef_res) <- c(paste(rownames(coef_table)[2], colnames(coef_table), sep = "_"),
paste(rownames(coef_table)[3], colnames(coef_table), sep = "_"),
paste(rownames(coef_table)[4], colnames(coef_table), sep = "_") )
coef_res
gene_i <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute$LRatio[1]
})
hist(gene_i)
hist(gene_i, main = "Gene i histogram",
xlab = "Permutation-based likelihood ratio statistic")
load(file.path(rdadir, "TEnew.rda"))
ls()
head(res.riborna)
require(Humanzee)
interact2way
require(devtools)
install_github("jhsiao999/Humanzee")
require(Humanzee)
interact2way
load(file.path(rdadir, "eSetRRP.rda"))
eset <- eSetRRP.RP.Q.log2[ ,eSetRRP.RP.Q.log2$seqData!="protein" &
eSetRRP.RP.Q.log2$species!="rhesus"]
res.riborna <- interact2way(eset)
res.riborna_LR <- res.riborna
load(file.path(rdadir, "ribopro.rda"))
eset <- eSetRRP.log2.Qmed[ ,eSetRRP.log2.Qmed$seqData!="rna" &
eSetRRP.log2.Qmed$species!="rhesus"]
res.ribopro_LR <- interact2way(eset)
# RNA vs. Protein
load(file.path(rdadir, "rnapro.rda"))
eset <- eSetRRP.log2.Qmed[ ,eSetRRP.log2.Qmed$seqData!="ribo" &
eSetRRP.log2.Qmed$species!="rhesus"]
res.rnapro_LR <- interact2way(eset)
plot(res.rnapro_LR$int.pval, res.rnapro$int.pval)
plot(res.rnapro_LR$int.qval, res.rnapro$int.qval)
plot(res.riborna_LR$int.qval, res.riborna$int.qval)
plot(res.riborna_LR$int.pval, res.riborna$int.pval)
plot(res.ribopro_LR$int.pval, res.ribopro$int.pval)
save(res.riborna_LR, res.ribopro_LR, res.rnapro_LR,
file = file.path(rdadir, "diff_diver_LR.rda"))
load(file.path(rdadir, "diff_diver_LR.rda"))
head(res_null_ribo_rna_seqData[[1]])
head(res.riborna_LR)
length(res_null_ribo_rna_seqData)
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[1, "LRatio"] > res.riborna_LR[1, "LRatio"]
})
n_larger/length(res_null_ribo_rna_seqData)
})
riborna_perm_pval
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[1, "LRatio"] > res.riborna_LR[1, "LRatio"]
})
if (nlarger > 0) {
n_larger/length(res_null_ribo_rna_seqData)
}
if (nlarger ==0) {
1/length(res_null_ribo_rna_seqData)
}
})
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[1, "LRatio"] > res.riborna_LR[1, "LRatio"]
})
if (n_larger > 0) {
n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
1/length(res_null_ribo_rna_seqData)
}
})
warnings()
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[1, "LRatio"] > res.riborna_LR[1, "LRatio"]
})
n_larger <- sum(n_larger)
if (n_larger > 0) {
n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
1/length(res_null_ribo_rna_seqData)
}
})
riborna_perm_pval
per_gene = 1
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[per_gene, "LRatio"] > res.riborna_LR[per_gene, "LRatio"]
})
n_larger <- sum(n_larger)
n_larger
if (n_larger > 0) {
n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
1/length(res_null_ribo_rna_seqData)
}
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[per_gene, "LRatio"] > res.riborna_LR[per_gene, "LRatio"]
})
n_larger <- sum(n_larger)
if (n_larger > 0) {
pval <- n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
pval <- 1/length(res_null_ribo_rna_seqData)
}
return(pval)
})
riborna_perm_pval
riborna_perm_pval <- sapply(1: dim(res.riborna_LR)[1], function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[per_gene, "LRatio"] > res.riborna_LR[per_gene, "LRatio"]
})
n_larger <- sum(n_larger)
if (n_larger > 0) {
pval <- n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
pval <- 1/length(res_null_ribo_rna_seqData)
}
return(pval)
})
traceback()
dim(res.riborna_LR)[1]
riborna_perm_pval <- sapply(1: dim(res.riborna_LR)[1], function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[per_gene, "LRatio"] > res.riborna_LR[per_gene, "LRatio"]
})
n_larger <- sum(n_larger, na.rm = TRUE)
if (n_larger > 0) {
pval <- n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
pval <- 1/length(res_null_ribo_rna_seqData)
}
return(pval)
})
riborna_perm_seqData <- riborna_perm_pval
hist(riborna_perm_seqData)
get_perm_pval <- function(perm_data, obs_data) {
n_simu <- length(perm_data)
n_genes <- dim(obs_data)[1]
perm_pvalues <- sapply(1: n_genes, function(per_gene) {
n_larger <- sapply(perm_data, function(per_permute) {
per_permute[per_gene, "LRatio"] > obs_data[per_gene, "LRatio"]
})
n_larger <- sum(n_larger, na.rm = TRUE)
if (n_larger > 0) {
pval <- n_larger/n_simu
}
if (n_larger ==0) {
pval <- 1/n_simu
}
return(pval)
})
return(perm_pvalues)
}
ribopro_perm_seqData <- get_perm_pvals(res_null_ribo_pro_seqData, res.ribopro_LR)
get_perm_pvals <- function(perm_data, obs_data) {
n_simu <- length(perm_data)
n_genes <- dim(obs_data)[1]
perm_pvalues <- sapply(1: n_genes, function(per_gene) {
n_larger <- sapply(perm_data, function(per_permute) {
per_permute[per_gene, "LRatio"] > obs_data[per_gene, "LRatio"]
})
n_larger <- sum(n_larger, na.rm = TRUE)
if (n_larger > 0) {
pval <- n_larger/n_simu
}
if (n_larger ==0) {
pval <- 1/n_simu
}
return(pval)
})
return(perm_pvalues)
}
ribopro_perm_seqData <- get_perm_pvals(res_null_ribo_pro_seqData, res.ribopro_LR)
rnapro_perm_seqData <- get_perm_pvals(res_null_rna_pro_seqData, res.rnapro_LR)
save(riborna_perm_seqData, ribopro_perm_seqData,
rnapro_perm_seqData, file = file.path(rdadir, "null_interact_seqData.rda") )
load(file.path(permute_dir, "permute-per-gene-species", "res-null-ribo-rna-species.rda"))
load(file.path(permute_dir, "permute-per-gene-species", "res-null-ribo-pro-species.rda"))
load(file.path(permute_dir, "permute-per-gene-species", "res-null-rna-pro-species.rda"))
load(file.path(rdadir, "diff_diver_LR.rda"))
# Compute empirical p-value for every gene
riborna_perm_species <- get_perm_pvals(res_null_ribo_rna_species, res.riborna_LR)
ribopro_perm_species <- get_perm_pvals(res_null_ribo_pro_species, res.ribopro_LR)
rnapro_perm_species <- get_perm_pvals(res_null_rna_pro_species, res.rnapro_LR)
save(riborna_perm_species, ribopro_perm_species,
rnapro_perm_species, file = file.path(rdadir, "null_interact_species.rda") )
load(file.path(permute_dir, "permute-per-gene", "res-null-ribo-rna-per-gene.rda"))
load(file.path(permute_dir, "permute-per-gene", "res-null-ribo-pro-per-gene.rda"))
load(file.path(permute_dir, "permute-per-gene", "res-null-rna-pro-per-gene.rda"))
riborna_perm <- get_perm_pvals(res_null_ribo_rna_per_gene, res.riborna_LR)
ribopro_perm <- get_perm_pvals(res_null_ribo_pro_per_gene, res.ribopro_LR)
rnapro_perm <- get_perm_pvals(res_null_rna_pro_per_gene, res.rnapro_LR)
save(riborna_perm, ribopro_perm,
rnapro_perm, file = file.path(rdadir, "null_interact.rda") )
hist(riborna_perm, main = "Ribo vs. RNA",
xlab = "Permutation-based p-value")
hist(ribopro_perm, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(rnapro_perm, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(riborna_perm_species, main = "Ribo vs. RNA",
xlab = "Permutation-based p-value")
hist(ribopro_perm_species, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(rnapro_perm_species, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(riborna_perm_seqData, main = "Ribo vs. RNA",
xlab = "Permutation-based p-value")
hist(ribopro_perm_seqData, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(rnapro_perm_seqData, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
>>>>>>> master
