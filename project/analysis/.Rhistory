sample_labels_2 <- sample(1: (n_samples_per_genes/2) )
cbind(emat_1[i,sample_labels_1], emat_2[i,sample_labels_2])
} ) )
dimnames(emat_per_permute)[2] <- NULL
eset_per_permute <- ExpressionSet(assayData = as.matrix(emat_per_permute))
phenoData(eset_per_permute) <- phenoData(eset_sub)
featureData(eset_per_permute) <- featureData(eset_sub)
return(interact2way(eset_per_permute))
}
str(null_interact)
library(Biobase)
## Set working directories
dir <- "../"
figdir <- file.path(dir,"figures")
rdadir <- file.path(dir,"rdas")
datadir <- file.path(dir, "data")
## Use broman package for colors
require(broman)
crayon <- brocolors("crayons")
## Load customized packages
require(devtools)
require(Humanzee)
dir
permute_dir <- "~/Dropbox/Github/primate_ribo_rda_permute/"
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-pro-seqData.rda"))
permute_dir <- "~/Dropbox/Github/primate_ribo_rdas_permute/"
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-pro-seqData.rda"))
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-rna-seqData.rda"))
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-rna-pro-seqData.rda"))
ls()
length(res_null_ribo_pro_seqData)
head(res_null_ribo_pro_seqData[[1]])
hist(res_null_ribo_pro_seqData[[1]]$int.pval)
require(Humanzee)
interact2way_full_buffer()
interact2way_full_buffer
interact2way
load(file.path(rdadir, "eSetRRP.rda"))
ls()
eSet <- eSetRRP.RP.Q.log2[,eSetRRP.RP.Q.log2$seqData!="protein" & eSetRRP.RP.Q.log2$species!="rhesus"]
fNames <- featureNames(eSet)
require(nlme)
i=1
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
aov <- anova(fit_null_try, fit_interact_try)
aov
aov[2,"L.Ratio"]
gls.res <- lapply(1:10, function(i) {
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LR.pval = aov[2, c("L.Ratio", "p-value")] )
}
return(res)
}
})
LR_res <- do.call(rbind, gls.res)
str(LR_res)
head(LR_res)
res
gls.res <- lapply(1:10, function(i) {
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
}
return(res)
}
})
LR_res <- do.call(rbind, gls.res)
LR_res
head(LR_res)
int.qval <- get_qval(LR_res$LR_pval)
LR_res$LR_pval
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-rna-seqData.rda"))
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-ribo-pro-seqData.rda"))
load(file.path(permute_dir, "permute-per-gene-seqData", "res-null-rna-pro-seqData.rda"))
ls()
head(res_null_ribo_rna_seqData)
head(res_null_ribo_rna_seqData)[[1]]
head(res_null_ribo_rna_seqData[[1]])
ls()
eSet <- eSetRRP.RP.Q.log2[ ,eSetRRP.RP.Q.log2$seqData!="protein" &
eSetRRP.RP.Q.log2$species!="rhesus"]
fNames <- featureNames(eSet)
require(nlme)
i
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
}
return(res)
}
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
}
return(res)
}
mat1 <- eSet[ featureNames(eSet)==fNames[i], ]
mat1aov.temp <- data.frame( cov=c(t(exprs(mat1))), seqData=mat1$seqData,
species = mat1$species, celline=mat1$celline )
mat1aov.temp$species <- as.factor(mat1aov.temp$species)
mat1aov.temp$seqData <- as.factor(mat1aov.temp$seqData)
# Fit two-way main effect model
fit_null_try <- tryCatch(
fit_null <- gls( cov ~ species + seqData,
weights = varIdent(form=~1|seqData),
data=mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_null_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Fit interaction model
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
if( inherits( fit_interact_try, "condition") ) {
res <- data.frame(LRatio = NA, LR_pval = NA)
} else {
# Likelihood ratio test
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
}
return(res)
}
fit_interact_try <- tryCatch(
fit_interact <- gls( cov ~ species * seqData,
weights = varIdent(form = ~1| seqData),
data = mat1aov.temp,
na.action = na.omit ),
condition = function(c) c
)
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
res <- data.frame(LRatio = NA, LR_pval = NA)
aov <- anova(fit_null_try, fit_interact_try)
res <- data.frame( LRatio = aov[2, "L.Ratio"],
LR_pval = aov[2, "p-value"] )
res
fit_interact_try
summary(fit_interact_try)
coef(fit_interact_try)
summary(coef(fit_interact_try))
str(summary(fit_interact_try))
summary(fit_interact_try)$tTable
str(summary(fit_interact_try)$tTable)
tt=(summary(fit_interact_try)$tTable
)
tt
tt[2,]
rownames(tt)[2]
paste(rownames(tt)[2],colnames(tt),sep=.)
paste(rownames(tt)[2],colnames(tt),sep=".")
paste(rownames(tt)[2],colnames(tt),sep="_")
coef_table <- summary(fit_interact_try)$tTable
coef_res <- c(coef_table[2, ], coef_table[3, ], coef_table[4, ])
names(coef_res) <- c(paste(rownames(coef_table)[2], colnames(coef_table), sep = "_"),
paste(rownames(coef_table)[3], colnames(coef_table), sep = "_"),
paste(rownames(coef_table)[4], colnames(coef_table), sep = "_") )
coef_res
gene_i <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute$LRatio[1]
})
hist(gene_i)
hist(gene_i, main = "Gene i histogram",
xlab = "Permutation-based likelihood ratio statistic")
load(file.path(rdadir, "TEnew.rda"))
ls()
head(res.riborna)
require(Humanzee)
interact2way
require(devtools)
install_github("jhsiao999/Humanzee")
require(Humanzee)
interact2way
load(file.path(rdadir, "eSetRRP.rda"))
eset <- eSetRRP.RP.Q.log2[ ,eSetRRP.RP.Q.log2$seqData!="protein" &
eSetRRP.RP.Q.log2$species!="rhesus"]
res.riborna <- interact2way(eset)
res.riborna_LR <- res.riborna
load(file.path(rdadir, "ribopro.rda"))
eset <- eSetRRP.log2.Qmed[ ,eSetRRP.log2.Qmed$seqData!="rna" &
eSetRRP.log2.Qmed$species!="rhesus"]
res.ribopro_LR <- interact2way(eset)
# RNA vs. Protein
load(file.path(rdadir, "rnapro.rda"))
eset <- eSetRRP.log2.Qmed[ ,eSetRRP.log2.Qmed$seqData!="ribo" &
eSetRRP.log2.Qmed$species!="rhesus"]
res.rnapro_LR <- interact2way(eset)
plot(res.rnapro_LR$int.pval, res.rnapro$int.pval)
plot(res.rnapro_LR$int.qval, res.rnapro$int.qval)
plot(res.riborna_LR$int.qval, res.riborna$int.qval)
plot(res.riborna_LR$int.pval, res.riborna$int.pval)
plot(res.ribopro_LR$int.pval, res.ribopro$int.pval)
save(res.riborna_LR, res.ribopro_LR, res.rnapro_LR,
file = file.path(rdadir, "diff_diver_LR.rda"))
load(file.path(rdadir, "diff_diver_LR.rda"))
head(res_null_ribo_rna_seqData[[1]])
head(res.riborna_LR)
length(res_null_ribo_rna_seqData)
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[1, "LRatio"] > res.riborna_LR[1, "LRatio"]
})
n_larger/length(res_null_ribo_rna_seqData)
})
riborna_perm_pval
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[1, "LRatio"] > res.riborna_LR[1, "LRatio"]
})
if (nlarger > 0) {
n_larger/length(res_null_ribo_rna_seqData)
}
if (nlarger ==0) {
1/length(res_null_ribo_rna_seqData)
}
})
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[1, "LRatio"] > res.riborna_LR[1, "LRatio"]
})
if (n_larger > 0) {
n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
1/length(res_null_ribo_rna_seqData)
}
})
warnings()
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[1, "LRatio"] > res.riborna_LR[1, "LRatio"]
})
n_larger <- sum(n_larger)
if (n_larger > 0) {
n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
1/length(res_null_ribo_rna_seqData)
}
})
riborna_perm_pval
per_gene = 1
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[per_gene, "LRatio"] > res.riborna_LR[per_gene, "LRatio"]
})
n_larger <- sum(n_larger)
n_larger
if (n_larger > 0) {
n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
1/length(res_null_ribo_rna_seqData)
}
riborna_perm_pval <- sapply(1: 10, function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[per_gene, "LRatio"] > res.riborna_LR[per_gene, "LRatio"]
})
n_larger <- sum(n_larger)
if (n_larger > 0) {
pval <- n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
pval <- 1/length(res_null_ribo_rna_seqData)
}
return(pval)
})
riborna_perm_pval
riborna_perm_pval <- sapply(1: dim(res.riborna_LR)[1], function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[per_gene, "LRatio"] > res.riborna_LR[per_gene, "LRatio"]
})
n_larger <- sum(n_larger)
if (n_larger > 0) {
pval <- n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
pval <- 1/length(res_null_ribo_rna_seqData)
}
return(pval)
})
traceback()
dim(res.riborna_LR)[1]
riborna_perm_pval <- sapply(1: dim(res.riborna_LR)[1], function(per_gene) {
n_larger <- sapply(res_null_ribo_rna_seqData, function(per_permute) {
per_permute[per_gene, "LRatio"] > res.riborna_LR[per_gene, "LRatio"]
})
n_larger <- sum(n_larger, na.rm = TRUE)
if (n_larger > 0) {
pval <- n_larger/length(res_null_ribo_rna_seqData)
}
if (n_larger ==0) {
pval <- 1/length(res_null_ribo_rna_seqData)
}
return(pval)
})
riborna_perm_seqData <- riborna_perm_pval
hist(riborna_perm_seqData)
get_perm_pval <- function(perm_data, obs_data) {
n_simu <- length(perm_data)
n_genes <- dim(obs_data)[1]
perm_pvalues <- sapply(1: n_genes, function(per_gene) {
n_larger <- sapply(perm_data, function(per_permute) {
per_permute[per_gene, "LRatio"] > obs_data[per_gene, "LRatio"]
})
n_larger <- sum(n_larger, na.rm = TRUE)
if (n_larger > 0) {
pval <- n_larger/n_simu
}
if (n_larger ==0) {
pval <- 1/n_simu
}
return(pval)
})
return(perm_pvalues)
}
ribopro_perm_seqData <- get_perm_pvals(res_null_ribo_pro_seqData, res.ribopro_LR)
get_perm_pvals <- function(perm_data, obs_data) {
n_simu <- length(perm_data)
n_genes <- dim(obs_data)[1]
perm_pvalues <- sapply(1: n_genes, function(per_gene) {
n_larger <- sapply(perm_data, function(per_permute) {
per_permute[per_gene, "LRatio"] > obs_data[per_gene, "LRatio"]
})
n_larger <- sum(n_larger, na.rm = TRUE)
if (n_larger > 0) {
pval <- n_larger/n_simu
}
if (n_larger ==0) {
pval <- 1/n_simu
}
return(pval)
})
return(perm_pvalues)
}
ribopro_perm_seqData <- get_perm_pvals(res_null_ribo_pro_seqData, res.ribopro_LR)
rnapro_perm_seqData <- get_perm_pvals(res_null_rna_pro_seqData, res.rnapro_LR)
save(riborna_perm_seqData, ribopro_perm_seqData,
rnapro_perm_seqData, file = file.path(rdadir, "null_interact_seqData.rda") )
load(file.path(permute_dir, "permute-per-gene-species", "res-null-ribo-rna-species.rda"))
load(file.path(permute_dir, "permute-per-gene-species", "res-null-ribo-pro-species.rda"))
load(file.path(permute_dir, "permute-per-gene-species", "res-null-rna-pro-species.rda"))
load(file.path(rdadir, "diff_diver_LR.rda"))
# Compute empirical p-value for every gene
riborna_perm_species <- get_perm_pvals(res_null_ribo_rna_species, res.riborna_LR)
ribopro_perm_species <- get_perm_pvals(res_null_ribo_pro_species, res.ribopro_LR)
rnapro_perm_species <- get_perm_pvals(res_null_rna_pro_species, res.rnapro_LR)
save(riborna_perm_species, ribopro_perm_species,
rnapro_perm_species, file = file.path(rdadir, "null_interact_species.rda") )
load(file.path(permute_dir, "permute-per-gene", "res-null-ribo-rna-per-gene.rda"))
load(file.path(permute_dir, "permute-per-gene", "res-null-ribo-pro-per-gene.rda"))
load(file.path(permute_dir, "permute-per-gene", "res-null-rna-pro-per-gene.rda"))
riborna_perm <- get_perm_pvals(res_null_ribo_rna_per_gene, res.riborna_LR)
ribopro_perm <- get_perm_pvals(res_null_ribo_pro_per_gene, res.ribopro_LR)
rnapro_perm <- get_perm_pvals(res_null_rna_pro_per_gene, res.rnapro_LR)
save(riborna_perm, ribopro_perm,
rnapro_perm, file = file.path(rdadir, "null_interact.rda") )
hist(riborna_perm, main = "Ribo vs. RNA",
xlab = "Permutation-based p-value")
hist(ribopro_perm, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(rnapro_perm, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(riborna_perm_species, main = "Ribo vs. RNA",
xlab = "Permutation-based p-value")
hist(ribopro_perm_species, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(rnapro_perm_species, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(riborna_perm_seqData, main = "Ribo vs. RNA",
xlab = "Permutation-based p-value")
hist(ribopro_perm_seqData, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
hist(rnapro_perm_seqData, main = "Ribo vs. Protein",
xlab = "Permutation-based p-value")
